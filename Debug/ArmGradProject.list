
ArmGradProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000205c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001e058  080021fc  080021fc  000031fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020254  08020254  0002c050  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08020254  08020254  00021254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802025c  0802025c  0002c050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802025c  0802025c  0002125c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08020260  08020260  00021260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000a050  20000000  08020264  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000a050  0802a2b4  0002c050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a1c0  0802a2b4  0002c1c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002c050  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000187c  00000000  00000000  0002c080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009c0  00000000  00000000  0002d8fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000230  00000000  00000000  0002e2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000017e  00000000  00000000  0002e4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000013ca  00000000  00000000  0002e66e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001716  00000000  00000000  0002fa38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008782  00000000  00000000  0003114e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000398d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c74  00000000  00000000  00039914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0003a588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000a050 	.word	0x2000a050
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080021e4 	.word	0x080021e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000a054 	.word	0x2000a054
 80001dc:	080021e4 	.word	0x080021e4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <HTFT_voidInit>:
#include "HTFT_Private.h"
#include "HTFT_Config.h"


void HTFT_voidInit()
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	//Configure Control pin &Reset pin
	MGPIO_void_SetPinMode(TFT_PORT,CONTROL_PIN,OUTPUT);
 8000a60:	2201      	movs	r2, #1
 8000a62:	2101      	movs	r1, #1
 8000a64:	2000      	movs	r0, #0
 8000a66:	f000 f911 	bl	8000c8c <MGPIO_void_SetPinMode>
	MGPIO_void_OutputConfig(TFT_PORT,CONTROL_PIN,PUSH_PULL,LOW_SPEED);
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2101      	movs	r1, #1
 8000a70:	2000      	movs	r0, #0
 8000a72:	f000 f97b 	bl	8000d6c <MGPIO_void_OutputConfig>
	MGPIO_void_SetPinMode(TFT_PORT,RST_PIN,OUTPUT);
 8000a76:	2201      	movs	r2, #1
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f000 f906 	bl	8000c8c <MGPIO_void_SetPinMode>
	MGPIO_void_OutputConfig(TFT_PORT,RST_PIN,PUSH_PULL,LOW_SPEED);
 8000a80:	2300      	movs	r3, #0
 8000a82:	2200      	movs	r2, #0
 8000a84:	2100      	movs	r1, #0
 8000a86:	2000      	movs	r0, #0
 8000a88:	f000 f970 	bl	8000d6c <MGPIO_void_OutputConfig>

	//Reset Sequence
	MGPIO_void_SetAtomicPinValue(TFT_PORT,RST_PIN,HIGH);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2100      	movs	r1, #0
 8000a90:	2000      	movs	r0, #0
 8000a92:	f000 fa8d 	bl	8000fb0 <MGPIO_void_SetAtomicPinValue>
	MSTK_voidDelayus(100);
 8000a96:	2064      	movs	r0, #100	@ 0x64
 8000a98:	f000 fcf4 	bl	8001484 <MSTK_voidDelayus>
	MGPIO_void_SetAtomicPinValue(TFT_PORT,RST_PIN,LOW);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f000 fa85 	bl	8000fb0 <MGPIO_void_SetAtomicPinValue>
	MSTK_voidDelayus(1);
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f000 fcec 	bl	8001484 <MSTK_voidDelayus>
	MGPIO_void_SetAtomicPinValue(TFT_PORT,RST_PIN,HIGH);
 8000aac:	2201      	movs	r2, #1
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f000 fa7d 	bl	8000fb0 <MGPIO_void_SetAtomicPinValue>
	MSTK_voidDelayus(100);
 8000ab6:	2064      	movs	r0, #100	@ 0x64
 8000ab8:	f000 fce4 	bl	8001484 <MSTK_voidDelayus>
	MGPIO_void_SetAtomicPinValue(TFT_PORT,RST_PIN,LOW);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2100      	movs	r1, #0
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f000 fa75 	bl	8000fb0 <MGPIO_void_SetAtomicPinValue>
	MSTK_voidDelayus(100);
 8000ac6:	2064      	movs	r0, #100	@ 0x64
 8000ac8:	f000 fcdc 	bl	8001484 <MSTK_voidDelayus>
	MGPIO_void_SetAtomicPinValue(TFT_PORT,RST_PIN,HIGH);
 8000acc:	2201      	movs	r2, #1
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f000 fa6d 	bl	8000fb0 <MGPIO_void_SetAtomicPinValue>
	MSTK_voidDelayms(120);
 8000ad6:	2078      	movs	r0, #120	@ 0x78
 8000ad8:	f000 fcb2 	bl	8001440 <MSTK_voidDelayms>

	//Sleep out
	HTFT_voidWriteCommand(SLEEP_OUT);
 8000adc:	2011      	movs	r0, #17
 8000ade:	f000 f821 	bl	8000b24 <HTFT_voidWriteCommand>
	MSTK_voidDelayms(10);
 8000ae2:	200a      	movs	r0, #10
 8000ae4:	f000 fcac 	bl	8001440 <MSTK_voidDelayms>

	//Select Color mode
	HTFT_voidWriteCommand(COLOR_MODE);
 8000ae8:	203a      	movs	r0, #58	@ 0x3a
 8000aea:	f000 f81b 	bl	8000b24 <HTFT_voidWriteCommand>
	HTFT_voidWriteData(RGB565);
 8000aee:	2005      	movs	r0, #5
 8000af0:	f000 f805 	bl	8000afe <HTFT_voidWriteData>

	//Display on
	HTFT_voidWriteCommand(DISPLAY_ON);
 8000af4:	2029      	movs	r0, #41	@ 0x29
 8000af6:	f000 f815 	bl	8000b24 <HTFT_voidWriteCommand>
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HTFT_voidWriteData>:
static void HTFT_voidWriteData(u8 Copy_u8Data)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	71fb      	strb	r3, [r7, #7]
	MGPIO_void_SetAtomicPinValue(TFT_PORT,CONTROL_PIN,HIGH);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f000 fa4f 	bl	8000fb0 <MGPIO_void_SetAtomicPinValue>
	(void)MSPI_u16Tranceive(Copy_u8Data);
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 fc1e 	bl	8001358 <MSPI_u16Tranceive>
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <HTFT_voidWriteCommand>:
static void HTFT_voidWriteCommand(u8 Copy_u8CMD)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
	MGPIO_void_SetAtomicPinValue(TFT_PORT,CONTROL_PIN,LOW);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2101      	movs	r1, #1
 8000b32:	2000      	movs	r0, #0
 8000b34:	f000 fa3c 	bl	8000fb0 <MGPIO_void_SetAtomicPinValue>
	(void)MSPI_u16Tranceive(Copy_u8CMD);
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f000 fc0b 	bl	8001358 <MSPI_u16Tranceive>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HTFT_voidDisplay>:
void HTFT_voidDisplay(const u16*Copy_pu16PTR)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b084      	sub	sp, #16
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
	u16 Local_u16Iteartor;
	u8 Local_u8HighPart,Local_u8LowPart;
	//Set x
	HTFT_voidWriteCommand(X_DIRECTION);
 8000b52:	202a      	movs	r0, #42	@ 0x2a
 8000b54:	f7ff ffe6 	bl	8000b24 <HTFT_voidWriteCommand>
	HTFT_voidWriteData(START_X_B0);
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f7ff ffd0 	bl	8000afe <HTFT_voidWriteData>
	HTFT_voidWriteData(START_X_B1);
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f7ff ffcd 	bl	8000afe <HTFT_voidWriteData>
	HTFT_voidWriteData(END_X_B0);
 8000b64:	2000      	movs	r0, #0
 8000b66:	f7ff ffca 	bl	8000afe <HTFT_voidWriteData>
	HTFT_voidWriteData(END_X_B1);
 8000b6a:	207f      	movs	r0, #127	@ 0x7f
 8000b6c:	f7ff ffc7 	bl	8000afe <HTFT_voidWriteData>

	//Set Y
	HTFT_voidWriteCommand(Y_DIRECTION);
 8000b70:	202b      	movs	r0, #43	@ 0x2b
 8000b72:	f7ff ffd7 	bl	8000b24 <HTFT_voidWriteCommand>
	HTFT_voidWriteData(START_Y_B0);
 8000b76:	2000      	movs	r0, #0
 8000b78:	f7ff ffc1 	bl	8000afe <HTFT_voidWriteData>
	HTFT_voidWriteData(START_Y_B1);
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f7ff ffbe 	bl	8000afe <HTFT_voidWriteData>
	HTFT_voidWriteData(END_Y_B0);
 8000b82:	2000      	movs	r0, #0
 8000b84:	f7ff ffbb 	bl	8000afe <HTFT_voidWriteData>
	HTFT_voidWriteData(END_Y_B1);
 8000b88:	209f      	movs	r0, #159	@ 0x9f
 8000b8a:	f7ff ffb8 	bl	8000afe <HTFT_voidWriteData>

	//Write on the screen
	HTFT_voidWriteCommand(SCREEN_WRITE);
 8000b8e:	202c      	movs	r0, #44	@ 0x2c
 8000b90:	f7ff ffc8 	bl	8000b24 <HTFT_voidWriteCommand>

	for(Local_u16Iteartor=0;Local_u16Iteartor<IMAGE_SIZE;Local_u16Iteartor++)
 8000b94:	2300      	movs	r3, #0
 8000b96:	81fb      	strh	r3, [r7, #14]
 8000b98:	e018      	b.n	8000bcc <HTFT_voidDisplay+0x82>
	{
		Local_u8LowPart=(u8)Copy_pu16PTR[Local_u16Iteartor]; //lsb
 8000b9a:	89fb      	ldrh	r3, [r7, #14]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	881b      	ldrh	r3, [r3, #0]
 8000ba4:	737b      	strb	r3, [r7, #13]
		Local_u8HighPart=(u8)(Copy_pu16PTR[Local_u16Iteartor]>>8);  //msb
 8000ba6:	89fb      	ldrh	r3, [r7, #14]
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	733b      	strb	r3, [r7, #12]

		HTFT_voidWriteData(Local_u8HighPart);
 8000bb6:	7b3b      	ldrb	r3, [r7, #12]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ffa0 	bl	8000afe <HTFT_voidWriteData>
		HTFT_voidWriteData(Local_u8LowPart);
 8000bbe:	7b7b      	ldrb	r3, [r7, #13]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff9c 	bl	8000afe <HTFT_voidWriteData>
	for(Local_u16Iteartor=0;Local_u16Iteartor<IMAGE_SIZE;Local_u16Iteartor++)
 8000bc6:	89fb      	ldrh	r3, [r7, #14]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	81fb      	strh	r3, [r7, #14]
 8000bcc:	89fb      	ldrh	r3, [r7, #14]
 8000bce:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8000bd2:	d3e2      	bcc.n	8000b9a <HTFT_voidDisplay+0x50>
	}

}
 8000bd4:	bf00      	nop
 8000bd6:	bf00      	nop
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <MADC1_voidInit>:
#include "MADC_Interface.h"
#include "MGPIO_Interface.h"

// Initialize ADC1
void MADC1_voidInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
    // Reset control registers CR1 & CR2
    ADC->CR1 = 0;
 8000be4:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <MADC1_voidInit+0x4c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	605a      	str	r2, [r3, #4]
    ADC->CR2 = 0;
 8000bea:	4b10      	ldr	r3, [pc, #64]	@ (8000c2c <MADC1_voidInit+0x4c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]

    // Enable ADC1 (ADON bit = 1)
    SET_BIT(ADC->CR2, ADON);
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <MADC1_voidInit+0x4c>)
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c2c <MADC1_voidInit+0x4c>)
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	6093      	str	r3, [r2, #8]

    // Single conversion mode (disable continuous mode)
    CLR_BIT(ADC->CR2, CONT);
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <MADC1_voidInit+0x4c>)
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	4a0a      	ldr	r2, [pc, #40]	@ (8000c2c <MADC1_voidInit+0x4c>)
 8000c02:	f023 0302 	bic.w	r3, r3, #2
 8000c06:	6093      	str	r3, [r2, #8]

    // Right alignment for data (default)
    CLR_BIT(ADC->CR2, ALIGN);
 8000c08:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <MADC1_voidInit+0x4c>)
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	4a07      	ldr	r2, [pc, #28]	@ (8000c2c <MADC1_voidInit+0x4c>)
 8000c0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000c12:	6093      	str	r3, [r2, #8]

    // Set sampling time = 3 cycles for all channels
    ADC->SMPR1 = 0x00000000; // Channels 10-18
 8000c14:	4b05      	ldr	r3, [pc, #20]	@ (8000c2c <MADC1_voidInit+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
    ADC->SMPR2 = 0x00000000; // Channels 0-9
 8000c1a:	4b04      	ldr	r3, [pc, #16]	@ (8000c2c <MADC1_voidInit+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40012000 	.word	0x40012000

08000c30 <MADC1_u16ReadChannel>:

// Read from a given ADC channel
u16 MADC1_u16ReadChannel(u8 channel)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
	// Select ADC channel in sequence register (SQR3)
    ADC->SQR3 &= ~(0x1F);        // Clear previous channel
 8000c3a:	4b13      	ldr	r3, [pc, #76]	@ (8000c88 <MADC1_u16ReadChannel+0x58>)
 8000c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c3e:	4a12      	ldr	r2, [pc, #72]	@ (8000c88 <MADC1_u16ReadChannel+0x58>)
 8000c40:	f023 031f 	bic.w	r3, r3, #31
 8000c44:	6353      	str	r3, [r2, #52]	@ 0x34
    ADC->SQR3 |= (channel & 0x1F); // Set new channel (0–18)
 8000c46:	4b10      	ldr	r3, [pc, #64]	@ (8000c88 <MADC1_u16ReadChannel+0x58>)
 8000c48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	f003 031f 	and.w	r3, r3, #31
 8000c50:	490d      	ldr	r1, [pc, #52]	@ (8000c88 <MADC1_u16ReadChannel+0x58>)
 8000c52:	4313      	orrs	r3, r2
 8000c54:	634b      	str	r3, [r1, #52]	@ 0x34

    // Start conversion (SWSTART bit = 1)
    SET_BIT(ADC->CR2, SWSTART);
 8000c56:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <MADC1_u16ReadChannel+0x58>)
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c88 <MADC1_u16ReadChannel+0x58>)
 8000c5c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000c60:	6093      	str	r3, [r2, #8]

    // Wait until conversion is complete (EOC = 1)
    while (GET_BIT(ADC->SR, EOC) == 0);
 8000c62:	bf00      	nop
 8000c64:	4b08      	ldr	r3, [pc, #32]	@ (8000c88 <MADC1_u16ReadChannel+0x58>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	085b      	lsrs	r3, r3, #1
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d0f8      	beq.n	8000c64 <MADC1_u16ReadChannel+0x34>

    // Read result from Data Register
    u16 result = (u16)(ADC->DR & 0xFFFF);
 8000c72:	4b05      	ldr	r3, [pc, #20]	@ (8000c88 <MADC1_u16ReadChannel+0x58>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c76:	81fb      	strh	r3, [r7, #14]

    // Clear EOC flag by reading ADC->DR (already done)

    // Return conversion result
    return result;
 8000c78:	89fb      	ldrh	r3, [r7, #14]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40012000 	.word	0x40012000

08000c8c <MGPIO_void_SetPinMode>:

#include "MGPIO_Interface.h"
#include "MGPIO_Private.h"

void MGPIO_void_SetPinMode(Port_t copy_uddtport,Pin_t copy_uddtpin,Mode_t copy_uddtmode)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
 8000c96:	460b      	mov	r3, r1
 8000c98:	71bb      	strb	r3, [r7, #6]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	717b      	strb	r3, [r7, #5]
    switch(copy_uddtport)
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d040      	beq.n	8000d26 <MGPIO_void_SetPinMode+0x9a>
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	dc57      	bgt.n	8000d58 <MGPIO_void_SetPinMode+0xcc>
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d002      	beq.n	8000cb2 <MGPIO_void_SetPinMode+0x26>
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d01b      	beq.n	8000ce8 <MGPIO_void_SetPinMode+0x5c>
       case PORTC: 
            GPIOB->MODER &=~(GPIO_MUSK<<(2*copy_uddtpin));
            GPIOB->MODER |=(copy_uddtmode<<(2*copy_uddtpin));
        break; 
    }
}
 8000cb0:	e052      	b.n	8000d58 <MGPIO_void_SetPinMode+0xcc>
        if (copy_uddtpin>=13){
 8000cb2:	79bb      	ldrb	r3, [r7, #6]
 8000cb4:	2b0c      	cmp	r3, #12
 8000cb6:	d84e      	bhi.n	8000d56 <MGPIO_void_SetPinMode+0xca>
            GPIOA->MODER &=~(GPIO_MUSK<<(2*copy_uddtpin));
 8000cb8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d64 <MGPIO_void_SetPinMode+0xd8>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	79ba      	ldrb	r2, [r7, #6]
 8000cbe:	0052      	lsls	r2, r2, #1
 8000cc0:	2103      	movs	r1, #3
 8000cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc6:	43d2      	mvns	r2, r2
 8000cc8:	4611      	mov	r1, r2
 8000cca:	4a26      	ldr	r2, [pc, #152]	@ (8000d64 <MGPIO_void_SetPinMode+0xd8>)
 8000ccc:	400b      	ands	r3, r1
 8000cce:	6013      	str	r3, [r2, #0]
            GPIOA->MODER |=(copy_uddtmode<<(2*copy_uddtpin));
 8000cd0:	4b24      	ldr	r3, [pc, #144]	@ (8000d64 <MGPIO_void_SetPinMode+0xd8>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	7979      	ldrb	r1, [r7, #5]
 8000cd6:	79ba      	ldrb	r2, [r7, #6]
 8000cd8:	0052      	lsls	r2, r2, #1
 8000cda:	fa01 f202 	lsl.w	r2, r1, r2
 8000cde:	4611      	mov	r1, r2
 8000ce0:	4a20      	ldr	r2, [pc, #128]	@ (8000d64 <MGPIO_void_SetPinMode+0xd8>)
 8000ce2:	430b      	orrs	r3, r1
 8000ce4:	6013      	str	r3, [r2, #0]
        break;
 8000ce6:	e036      	b.n	8000d56 <MGPIO_void_SetPinMode+0xca>
        if ((copy_uddtpin>=3)&&(copy_uddtpin<=5)){
 8000ce8:	79bb      	ldrb	r3, [r7, #6]
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d902      	bls.n	8000cf4 <MGPIO_void_SetPinMode+0x68>
 8000cee:	79bb      	ldrb	r3, [r7, #6]
 8000cf0:	2b05      	cmp	r3, #5
 8000cf2:	d917      	bls.n	8000d24 <MGPIO_void_SetPinMode+0x98>
            GPIOB->MODER &=~(GPIO_MUSK<<(2*copy_uddtpin));
 8000cf4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d68 <MGPIO_void_SetPinMode+0xdc>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	79ba      	ldrb	r2, [r7, #6]
 8000cfa:	0052      	lsls	r2, r2, #1
 8000cfc:	2103      	movs	r1, #3
 8000cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8000d02:	43d2      	mvns	r2, r2
 8000d04:	4611      	mov	r1, r2
 8000d06:	4a18      	ldr	r2, [pc, #96]	@ (8000d68 <MGPIO_void_SetPinMode+0xdc>)
 8000d08:	400b      	ands	r3, r1
 8000d0a:	6013      	str	r3, [r2, #0]
            GPIOB->MODER |=(copy_uddtmode<<(2*copy_uddtpin));
 8000d0c:	4b16      	ldr	r3, [pc, #88]	@ (8000d68 <MGPIO_void_SetPinMode+0xdc>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	7979      	ldrb	r1, [r7, #5]
 8000d12:	79ba      	ldrb	r2, [r7, #6]
 8000d14:	0052      	lsls	r2, r2, #1
 8000d16:	fa01 f202 	lsl.w	r2, r1, r2
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4a12      	ldr	r2, [pc, #72]	@ (8000d68 <MGPIO_void_SetPinMode+0xdc>)
 8000d1e:	430b      	orrs	r3, r1
 8000d20:	6013      	str	r3, [r2, #0]
        break;
 8000d22:	e019      	b.n	8000d58 <MGPIO_void_SetPinMode+0xcc>
 8000d24:	e018      	b.n	8000d58 <MGPIO_void_SetPinMode+0xcc>
            GPIOB->MODER &=~(GPIO_MUSK<<(2*copy_uddtpin));
 8000d26:	4b10      	ldr	r3, [pc, #64]	@ (8000d68 <MGPIO_void_SetPinMode+0xdc>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	79ba      	ldrb	r2, [r7, #6]
 8000d2c:	0052      	lsls	r2, r2, #1
 8000d2e:	2103      	movs	r1, #3
 8000d30:	fa01 f202 	lsl.w	r2, r1, r2
 8000d34:	43d2      	mvns	r2, r2
 8000d36:	4611      	mov	r1, r2
 8000d38:	4a0b      	ldr	r2, [pc, #44]	@ (8000d68 <MGPIO_void_SetPinMode+0xdc>)
 8000d3a:	400b      	ands	r3, r1
 8000d3c:	6013      	str	r3, [r2, #0]
            GPIOB->MODER |=(copy_uddtmode<<(2*copy_uddtpin));
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d68 <MGPIO_void_SetPinMode+0xdc>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	7979      	ldrb	r1, [r7, #5]
 8000d44:	79ba      	ldrb	r2, [r7, #6]
 8000d46:	0052      	lsls	r2, r2, #1
 8000d48:	fa01 f202 	lsl.w	r2, r1, r2
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4a06      	ldr	r2, [pc, #24]	@ (8000d68 <MGPIO_void_SetPinMode+0xdc>)
 8000d50:	430b      	orrs	r3, r1
 8000d52:	6013      	str	r3, [r2, #0]
        break; 
 8000d54:	e000      	b.n	8000d58 <MGPIO_void_SetPinMode+0xcc>
        break;
 8000d56:	bf00      	nop
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	40020000 	.word	0x40020000
 8000d68:	40020400 	.word	0x40020400

08000d6c <MGPIO_void_OutputConfig>:

void MGPIO_void_OutputConfig(Port_t copy_uddtport,Pin_t copy_uddtpin,Output_t copy_uddtoutput,Speed_t copy_uddtspeed)
{
 8000d6c:	b490      	push	{r4, r7}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4604      	mov	r4, r0
 8000d74:	4608      	mov	r0, r1
 8000d76:	4611      	mov	r1, r2
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4623      	mov	r3, r4
 8000d7c:	71fb      	strb	r3, [r7, #7]
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71bb      	strb	r3, [r7, #6]
 8000d82:	460b      	mov	r3, r1
 8000d84:	717b      	strb	r3, [r7, #5]
 8000d86:	4613      	mov	r3, r2
 8000d88:	713b      	strb	r3, [r7, #4]
    switch(copy_uddtport)
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d06c      	beq.n	8000e6a <MGPIO_void_OutputConfig+0xfe>
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	f300 8098 	bgt.w	8000ec6 <MGPIO_void_OutputConfig+0x15a>
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d002      	beq.n	8000da0 <MGPIO_void_OutputConfig+0x34>
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d031      	beq.n	8000e02 <MGPIO_void_OutputConfig+0x96>
            GPIOC->OTYPER |=(copy_uddtoutput<<copy_uddtpin);
            GPIOC->OSPEEDR &=~(GPIO_MUSK<<(2*copy_uddtpin));
            GPIOC->OSPEEDR |=(copy_uddtspeed<<(2*copy_uddtpin));
        break; 
    }
}
 8000d9e:	e092      	b.n	8000ec6 <MGPIO_void_OutputConfig+0x15a>
        if (copy_uddtpin>=13){
 8000da0:	79bb      	ldrb	r3, [r7, #6]
 8000da2:	2b0c      	cmp	r3, #12
 8000da4:	f200 808e 	bhi.w	8000ec4 <MGPIO_void_OutputConfig+0x158>
            GPIOA->OTYPER &=~(1<<copy_uddtpin);
 8000da8:	4b49      	ldr	r3, [pc, #292]	@ (8000ed0 <MGPIO_void_OutputConfig+0x164>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	79ba      	ldrb	r2, [r7, #6]
 8000dae:	2101      	movs	r1, #1
 8000db0:	fa01 f202 	lsl.w	r2, r1, r2
 8000db4:	43d2      	mvns	r2, r2
 8000db6:	4611      	mov	r1, r2
 8000db8:	4a45      	ldr	r2, [pc, #276]	@ (8000ed0 <MGPIO_void_OutputConfig+0x164>)
 8000dba:	400b      	ands	r3, r1
 8000dbc:	6053      	str	r3, [r2, #4]
            GPIOA->OTYPER |=(copy_uddtoutput<<copy_uddtpin);
 8000dbe:	4b44      	ldr	r3, [pc, #272]	@ (8000ed0 <MGPIO_void_OutputConfig+0x164>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	7979      	ldrb	r1, [r7, #5]
 8000dc4:	79ba      	ldrb	r2, [r7, #6]
 8000dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dca:	4611      	mov	r1, r2
 8000dcc:	4a40      	ldr	r2, [pc, #256]	@ (8000ed0 <MGPIO_void_OutputConfig+0x164>)
 8000dce:	430b      	orrs	r3, r1
 8000dd0:	6053      	str	r3, [r2, #4]
            GPIOA->OSPEEDR &=~(GPIO_MUSK<<(2*copy_uddtpin));
 8000dd2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ed0 <MGPIO_void_OutputConfig+0x164>)
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	79ba      	ldrb	r2, [r7, #6]
 8000dd8:	0052      	lsls	r2, r2, #1
 8000dda:	2103      	movs	r1, #3
 8000ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8000de0:	43d2      	mvns	r2, r2
 8000de2:	4611      	mov	r1, r2
 8000de4:	4a3a      	ldr	r2, [pc, #232]	@ (8000ed0 <MGPIO_void_OutputConfig+0x164>)
 8000de6:	400b      	ands	r3, r1
 8000de8:	6093      	str	r3, [r2, #8]
            GPIOA->OSPEEDR |=(copy_uddtspeed<<(2*copy_uddtpin));
 8000dea:	4b39      	ldr	r3, [pc, #228]	@ (8000ed0 <MGPIO_void_OutputConfig+0x164>)
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	7939      	ldrb	r1, [r7, #4]
 8000df0:	79ba      	ldrb	r2, [r7, #6]
 8000df2:	0052      	lsls	r2, r2, #1
 8000df4:	fa01 f202 	lsl.w	r2, r1, r2
 8000df8:	4611      	mov	r1, r2
 8000dfa:	4a35      	ldr	r2, [pc, #212]	@ (8000ed0 <MGPIO_void_OutputConfig+0x164>)
 8000dfc:	430b      	orrs	r3, r1
 8000dfe:	6093      	str	r3, [r2, #8]
        break;
 8000e00:	e060      	b.n	8000ec4 <MGPIO_void_OutputConfig+0x158>
        if ((copy_uddtpin>=3)&&(copy_uddtpin<=5)){
 8000e02:	79bb      	ldrb	r3, [r7, #6]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d902      	bls.n	8000e0e <MGPIO_void_OutputConfig+0xa2>
 8000e08:	79bb      	ldrb	r3, [r7, #6]
 8000e0a:	2b05      	cmp	r3, #5
 8000e0c:	d92c      	bls.n	8000e68 <MGPIO_void_OutputConfig+0xfc>
            GPIOB->OTYPER &=~(1<<copy_uddtpin);
 8000e0e:	4b31      	ldr	r3, [pc, #196]	@ (8000ed4 <MGPIO_void_OutputConfig+0x168>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	79ba      	ldrb	r2, [r7, #6]
 8000e14:	2101      	movs	r1, #1
 8000e16:	fa01 f202 	lsl.w	r2, r1, r2
 8000e1a:	43d2      	mvns	r2, r2
 8000e1c:	4611      	mov	r1, r2
 8000e1e:	4a2d      	ldr	r2, [pc, #180]	@ (8000ed4 <MGPIO_void_OutputConfig+0x168>)
 8000e20:	400b      	ands	r3, r1
 8000e22:	6053      	str	r3, [r2, #4]
            GPIOB->OTYPER |=(copy_uddtoutput<<copy_uddtpin);
 8000e24:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed4 <MGPIO_void_OutputConfig+0x168>)
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	7979      	ldrb	r1, [r7, #5]
 8000e2a:	79ba      	ldrb	r2, [r7, #6]
 8000e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e30:	4611      	mov	r1, r2
 8000e32:	4a28      	ldr	r2, [pc, #160]	@ (8000ed4 <MGPIO_void_OutputConfig+0x168>)
 8000e34:	430b      	orrs	r3, r1
 8000e36:	6053      	str	r3, [r2, #4]
            GPIOB->OSPEEDR &=~(GPIO_MUSK<<(2*copy_uddtpin));
 8000e38:	4b26      	ldr	r3, [pc, #152]	@ (8000ed4 <MGPIO_void_OutputConfig+0x168>)
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	79ba      	ldrb	r2, [r7, #6]
 8000e3e:	0052      	lsls	r2, r2, #1
 8000e40:	2103      	movs	r1, #3
 8000e42:	fa01 f202 	lsl.w	r2, r1, r2
 8000e46:	43d2      	mvns	r2, r2
 8000e48:	4611      	mov	r1, r2
 8000e4a:	4a22      	ldr	r2, [pc, #136]	@ (8000ed4 <MGPIO_void_OutputConfig+0x168>)
 8000e4c:	400b      	ands	r3, r1
 8000e4e:	6093      	str	r3, [r2, #8]
            GPIOB->OSPEEDR |=(copy_uddtspeed<<(2*copy_uddtpin));
 8000e50:	4b20      	ldr	r3, [pc, #128]	@ (8000ed4 <MGPIO_void_OutputConfig+0x168>)
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	7939      	ldrb	r1, [r7, #4]
 8000e56:	79ba      	ldrb	r2, [r7, #6]
 8000e58:	0052      	lsls	r2, r2, #1
 8000e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4a1c      	ldr	r2, [pc, #112]	@ (8000ed4 <MGPIO_void_OutputConfig+0x168>)
 8000e62:	430b      	orrs	r3, r1
 8000e64:	6093      	str	r3, [r2, #8]
        break;
 8000e66:	e02e      	b.n	8000ec6 <MGPIO_void_OutputConfig+0x15a>
 8000e68:	e02d      	b.n	8000ec6 <MGPIO_void_OutputConfig+0x15a>
            GPIOC->OTYPER &=~(1<<copy_uddtpin);
 8000e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed8 <MGPIO_void_OutputConfig+0x16c>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	79ba      	ldrb	r2, [r7, #6]
 8000e70:	2101      	movs	r1, #1
 8000e72:	fa01 f202 	lsl.w	r2, r1, r2
 8000e76:	43d2      	mvns	r2, r2
 8000e78:	4611      	mov	r1, r2
 8000e7a:	4a17      	ldr	r2, [pc, #92]	@ (8000ed8 <MGPIO_void_OutputConfig+0x16c>)
 8000e7c:	400b      	ands	r3, r1
 8000e7e:	6053      	str	r3, [r2, #4]
            GPIOC->OTYPER |=(copy_uddtoutput<<copy_uddtpin);
 8000e80:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <MGPIO_void_OutputConfig+0x16c>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	7979      	ldrb	r1, [r7, #5]
 8000e86:	79ba      	ldrb	r2, [r7, #6]
 8000e88:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8c:	4611      	mov	r1, r2
 8000e8e:	4a12      	ldr	r2, [pc, #72]	@ (8000ed8 <MGPIO_void_OutputConfig+0x16c>)
 8000e90:	430b      	orrs	r3, r1
 8000e92:	6053      	str	r3, [r2, #4]
            GPIOC->OSPEEDR &=~(GPIO_MUSK<<(2*copy_uddtpin));
 8000e94:	4b10      	ldr	r3, [pc, #64]	@ (8000ed8 <MGPIO_void_OutputConfig+0x16c>)
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	79ba      	ldrb	r2, [r7, #6]
 8000e9a:	0052      	lsls	r2, r2, #1
 8000e9c:	2103      	movs	r1, #3
 8000e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea2:	43d2      	mvns	r2, r2
 8000ea4:	4611      	mov	r1, r2
 8000ea6:	4a0c      	ldr	r2, [pc, #48]	@ (8000ed8 <MGPIO_void_OutputConfig+0x16c>)
 8000ea8:	400b      	ands	r3, r1
 8000eaa:	6093      	str	r3, [r2, #8]
            GPIOC->OSPEEDR |=(copy_uddtspeed<<(2*copy_uddtpin));
 8000eac:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <MGPIO_void_OutputConfig+0x16c>)
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	7939      	ldrb	r1, [r7, #4]
 8000eb2:	79ba      	ldrb	r2, [r7, #6]
 8000eb4:	0052      	lsls	r2, r2, #1
 8000eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4a06      	ldr	r2, [pc, #24]	@ (8000ed8 <MGPIO_void_OutputConfig+0x16c>)
 8000ebe:	430b      	orrs	r3, r1
 8000ec0:	6093      	str	r3, [r2, #8]
        break; 
 8000ec2:	e000      	b.n	8000ec6 <MGPIO_void_OutputConfig+0x15a>
        break;
 8000ec4:	bf00      	nop
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc90      	pop	{r4, r7}
 8000ece:	4770      	bx	lr
 8000ed0:	40020000 	.word	0x40020000
 8000ed4:	40020400 	.word	0x40020400
 8000ed8:	40020800 	.word	0x40020800

08000edc <MGPIO_void_WritePinValue>:

void MGPIO_void_WritePinValue(Port_t copy_uddtport,Pin_t copy_uddtpin,Value_t copy_uddtvalue)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	71bb      	strb	r3, [r7, #6]
 8000eea:	4613      	mov	r3, r2
 8000eec:	717b      	strb	r3, [r7, #5]
    switch(copy_uddtport)
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d03c      	beq.n	8000f6e <MGPIO_void_WritePinValue+0x92>
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	dc51      	bgt.n	8000f9c <MGPIO_void_WritePinValue+0xc0>
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d002      	beq.n	8000f02 <MGPIO_void_WritePinValue+0x26>
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d019      	beq.n	8000f34 <MGPIO_void_WritePinValue+0x58>
        case PORTC: 
            GPIOC->ODR &=~(1<<copy_uddtpin);
            GPIOC->ODR |=(copy_uddtvalue<<copy_uddtpin);
            break;
    }
}
 8000f00:	e04c      	b.n	8000f9c <MGPIO_void_WritePinValue+0xc0>
        if (copy_uddtpin>=13){
 8000f02:	79bb      	ldrb	r3, [r7, #6]
 8000f04:	2b0c      	cmp	r3, #12
 8000f06:	d848      	bhi.n	8000f9a <MGPIO_void_WritePinValue+0xbe>
            GPIOA->ODR &=~(1<<copy_uddtpin);
 8000f08:	4b27      	ldr	r3, [pc, #156]	@ (8000fa8 <MGPIO_void_WritePinValue+0xcc>)
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	79ba      	ldrb	r2, [r7, #6]
 8000f0e:	2101      	movs	r1, #1
 8000f10:	fa01 f202 	lsl.w	r2, r1, r2
 8000f14:	43d2      	mvns	r2, r2
 8000f16:	4611      	mov	r1, r2
 8000f18:	4a23      	ldr	r2, [pc, #140]	@ (8000fa8 <MGPIO_void_WritePinValue+0xcc>)
 8000f1a:	400b      	ands	r3, r1
 8000f1c:	6153      	str	r3, [r2, #20]
            GPIOA->ODR |=(copy_uddtvalue<<copy_uddtpin);
 8000f1e:	4b22      	ldr	r3, [pc, #136]	@ (8000fa8 <MGPIO_void_WritePinValue+0xcc>)
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	7979      	ldrb	r1, [r7, #5]
 8000f24:	79ba      	ldrb	r2, [r7, #6]
 8000f26:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4a1e      	ldr	r2, [pc, #120]	@ (8000fa8 <MGPIO_void_WritePinValue+0xcc>)
 8000f2e:	430b      	orrs	r3, r1
 8000f30:	6153      	str	r3, [r2, #20]
        break;
 8000f32:	e032      	b.n	8000f9a <MGPIO_void_WritePinValue+0xbe>
        if ((copy_uddtpin>=3)&&(copy_uddtpin<=5)){
 8000f34:	79bb      	ldrb	r3, [r7, #6]
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d902      	bls.n	8000f40 <MGPIO_void_WritePinValue+0x64>
 8000f3a:	79bb      	ldrb	r3, [r7, #6]
 8000f3c:	2b05      	cmp	r3, #5
 8000f3e:	d915      	bls.n	8000f6c <MGPIO_void_WritePinValue+0x90>
        	GPIOA->ODR &=~(1<<copy_uddtpin);
 8000f40:	4b19      	ldr	r3, [pc, #100]	@ (8000fa8 <MGPIO_void_WritePinValue+0xcc>)
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	79ba      	ldrb	r2, [r7, #6]
 8000f46:	2101      	movs	r1, #1
 8000f48:	fa01 f202 	lsl.w	r2, r1, r2
 8000f4c:	43d2      	mvns	r2, r2
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4a15      	ldr	r2, [pc, #84]	@ (8000fa8 <MGPIO_void_WritePinValue+0xcc>)
 8000f52:	400b      	ands	r3, r1
 8000f54:	6153      	str	r3, [r2, #20]
        	GPIOA->ODR |=(copy_uddtvalue<<copy_uddtpin);
 8000f56:	4b14      	ldr	r3, [pc, #80]	@ (8000fa8 <MGPIO_void_WritePinValue+0xcc>)
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	7979      	ldrb	r1, [r7, #5]
 8000f5c:	79ba      	ldrb	r2, [r7, #6]
 8000f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f62:	4611      	mov	r1, r2
 8000f64:	4a10      	ldr	r2, [pc, #64]	@ (8000fa8 <MGPIO_void_WritePinValue+0xcc>)
 8000f66:	430b      	orrs	r3, r1
 8000f68:	6153      	str	r3, [r2, #20]
        break;
 8000f6a:	e017      	b.n	8000f9c <MGPIO_void_WritePinValue+0xc0>
 8000f6c:	e016      	b.n	8000f9c <MGPIO_void_WritePinValue+0xc0>
            GPIOC->ODR &=~(1<<copy_uddtpin);
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <MGPIO_void_WritePinValue+0xd0>)
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	79ba      	ldrb	r2, [r7, #6]
 8000f74:	2101      	movs	r1, #1
 8000f76:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7a:	43d2      	mvns	r2, r2
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	4a0b      	ldr	r2, [pc, #44]	@ (8000fac <MGPIO_void_WritePinValue+0xd0>)
 8000f80:	400b      	ands	r3, r1
 8000f82:	6153      	str	r3, [r2, #20]
            GPIOC->ODR |=(copy_uddtvalue<<copy_uddtpin);
 8000f84:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <MGPIO_void_WritePinValue+0xd0>)
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	7979      	ldrb	r1, [r7, #5]
 8000f8a:	79ba      	ldrb	r2, [r7, #6]
 8000f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f90:	4611      	mov	r1, r2
 8000f92:	4a06      	ldr	r2, [pc, #24]	@ (8000fac <MGPIO_void_WritePinValue+0xd0>)
 8000f94:	430b      	orrs	r3, r1
 8000f96:	6153      	str	r3, [r2, #20]
            break;
 8000f98:	e000      	b.n	8000f9c <MGPIO_void_WritePinValue+0xc0>
        break;
 8000f9a:	bf00      	nop
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	40020000 	.word	0x40020000
 8000fac:	40020800 	.word	0x40020800

08000fb0 <MGPIO_void_SetAtomicPinValue>:

void MGPIO_void_SetAtomicPinValue(Port_t copy_uddtport,Pin_t copy_uddtpin,Value_t copy_uddtvalue)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
 8000fba:	460b      	mov	r3, r1
 8000fbc:	71bb      	strb	r3, [r7, #6]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	717b      	strb	r3, [r7, #5]
   switch(copy_uddtport)
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d028      	beq.n	800101a <MGPIO_void_SetAtomicPinValue+0x6a>
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	dc33      	bgt.n	8001034 <MGPIO_void_SetAtomicPinValue+0x84>
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d002      	beq.n	8000fd6 <MGPIO_void_SetAtomicPinValue+0x26>
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d00f      	beq.n	8000ff4 <MGPIO_void_SetAtomicPinValue+0x44>
              copy_uddtpin+=16;  
            }
            GPIOC->BSRR =(1<<copy_uddtpin);
            break; 
    }
}
 8000fd4:	e02e      	b.n	8001034 <MGPIO_void_SetAtomicPinValue+0x84>
        if (copy_uddtpin>=13){
 8000fd6:	79bb      	ldrb	r3, [r7, #6]
 8000fd8:	2b0c      	cmp	r3, #12
 8000fda:	d82a      	bhi.n	8001032 <MGPIO_void_SetAtomicPinValue+0x82>
            if(copy_uddtvalue==LOW)
 8000fdc:	797b      	ldrb	r3, [r7, #5]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d102      	bne.n	8000fe8 <MGPIO_void_SetAtomicPinValue+0x38>
              copy_uddtpin+=16;  
 8000fe2:	79bb      	ldrb	r3, [r7, #6]
 8000fe4:	3310      	adds	r3, #16
 8000fe6:	71bb      	strb	r3, [r7, #6]
            GPIOA->BSRR =(1<<copy_uddtpin);
 8000fe8:	79bb      	ldrb	r3, [r7, #6]
 8000fea:	2201      	movs	r2, #1
 8000fec:	409a      	lsls	r2, r3
 8000fee:	4b14      	ldr	r3, [pc, #80]	@ (8001040 <MGPIO_void_SetAtomicPinValue+0x90>)
 8000ff0:	619a      	str	r2, [r3, #24]
        break;
 8000ff2:	e01e      	b.n	8001032 <MGPIO_void_SetAtomicPinValue+0x82>
        if ((copy_uddtpin>=3)&&(copy_uddtpin<=5)){
 8000ff4:	79bb      	ldrb	r3, [r7, #6]
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d902      	bls.n	8001000 <MGPIO_void_SetAtomicPinValue+0x50>
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
 8000ffc:	2b05      	cmp	r3, #5
 8000ffe:	d90b      	bls.n	8001018 <MGPIO_void_SetAtomicPinValue+0x68>
             if(copy_uddtvalue==LOW)
 8001000:	797b      	ldrb	r3, [r7, #5]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d102      	bne.n	800100c <MGPIO_void_SetAtomicPinValue+0x5c>
              copy_uddtpin+=16;  
 8001006:	79bb      	ldrb	r3, [r7, #6]
 8001008:	3310      	adds	r3, #16
 800100a:	71bb      	strb	r3, [r7, #6]
            GPIOB->BSRR =(1<<copy_uddtpin);
 800100c:	79bb      	ldrb	r3, [r7, #6]
 800100e:	2201      	movs	r2, #1
 8001010:	409a      	lsls	r2, r3
 8001012:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <MGPIO_void_SetAtomicPinValue+0x94>)
 8001014:	619a      	str	r2, [r3, #24]
        break;
 8001016:	e00d      	b.n	8001034 <MGPIO_void_SetAtomicPinValue+0x84>
 8001018:	e00c      	b.n	8001034 <MGPIO_void_SetAtomicPinValue+0x84>
            if(copy_uddtvalue==LOW)
 800101a:	797b      	ldrb	r3, [r7, #5]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d102      	bne.n	8001026 <MGPIO_void_SetAtomicPinValue+0x76>
              copy_uddtpin+=16;  
 8001020:	79bb      	ldrb	r3, [r7, #6]
 8001022:	3310      	adds	r3, #16
 8001024:	71bb      	strb	r3, [r7, #6]
            GPIOC->BSRR =(1<<copy_uddtpin);
 8001026:	79bb      	ldrb	r3, [r7, #6]
 8001028:	2201      	movs	r2, #1
 800102a:	409a      	lsls	r2, r3
 800102c:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <MGPIO_void_SetAtomicPinValue+0x98>)
 800102e:	619a      	str	r2, [r3, #24]
            break; 
 8001030:	e000      	b.n	8001034 <MGPIO_void_SetAtomicPinValue+0x84>
        break;
 8001032:	bf00      	nop
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	40020000 	.word	0x40020000
 8001044:	40020400 	.word	0x40020400
 8001048:	40020800 	.word	0x40020800

0800104c <MGPIO_void_AltFunConfig>:
    }
    return Local_u8Value;
}

void MGPIO_void_AltFunConfig(Port_t copy_uddtport,Pin_t copy_uddtpin,AF_t copy_uddtaltfun)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
 8001056:	460b      	mov	r3, r1
 8001058:	71bb      	strb	r3, [r7, #6]
 800105a:	4613      	mov	r3, r2
 800105c:	717b      	strb	r3, [r7, #5]
     switch(copy_uddtport)
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	2b02      	cmp	r3, #2
 8001062:	f000 8086 	beq.w	8001172 <MGPIO_void_AltFunConfig+0x126>
 8001066:	2b02      	cmp	r3, #2
 8001068:	f300 80c1 	bgt.w	80011ee <MGPIO_void_AltFunConfig+0x1a2>
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <MGPIO_void_AltFunConfig+0x2a>
 8001070:	2b01      	cmp	r3, #1
 8001072:	d03e      	beq.n	80010f2 <MGPIO_void_AltFunConfig+0xa6>
            GPIOC->AFRH &=~(ALT_MUSK<<(4*copy_uddtpin));
            GPIOC->AFRH |=(copy_uddtaltfun<<(4*copy_uddtpin));
          }
        break; 
    }
}
 8001074:	e0bb      	b.n	80011ee <MGPIO_void_AltFunConfig+0x1a2>
        if (copy_uddtpin>=13){
 8001076:	79bb      	ldrb	r3, [r7, #6]
 8001078:	2b0c      	cmp	r3, #12
 800107a:	f200 80b3 	bhi.w	80011e4 <MGPIO_void_AltFunConfig+0x198>
          if(copy_uddtpin<8){
 800107e:	79bb      	ldrb	r3, [r7, #6]
 8001080:	2b07      	cmp	r3, #7
 8001082:	d817      	bhi.n	80010b4 <MGPIO_void_AltFunConfig+0x68>
            GPIOA->AFRL &=~(ALT_MUSK<<(4*copy_uddtpin));
 8001084:	4b5d      	ldr	r3, [pc, #372]	@ (80011fc <MGPIO_void_AltFunConfig+0x1b0>)
 8001086:	6a1b      	ldr	r3, [r3, #32]
 8001088:	79ba      	ldrb	r2, [r7, #6]
 800108a:	0092      	lsls	r2, r2, #2
 800108c:	210f      	movs	r1, #15
 800108e:	fa01 f202 	lsl.w	r2, r1, r2
 8001092:	43d2      	mvns	r2, r2
 8001094:	4611      	mov	r1, r2
 8001096:	4a59      	ldr	r2, [pc, #356]	@ (80011fc <MGPIO_void_AltFunConfig+0x1b0>)
 8001098:	400b      	ands	r3, r1
 800109a:	6213      	str	r3, [r2, #32]
            GPIOA->AFRL |=(copy_uddtaltfun<<(4*copy_uddtpin));
 800109c:	4b57      	ldr	r3, [pc, #348]	@ (80011fc <MGPIO_void_AltFunConfig+0x1b0>)
 800109e:	6a1b      	ldr	r3, [r3, #32]
 80010a0:	7979      	ldrb	r1, [r7, #5]
 80010a2:	79ba      	ldrb	r2, [r7, #6]
 80010a4:	0092      	lsls	r2, r2, #2
 80010a6:	fa01 f202 	lsl.w	r2, r1, r2
 80010aa:	4611      	mov	r1, r2
 80010ac:	4a53      	ldr	r2, [pc, #332]	@ (80011fc <MGPIO_void_AltFunConfig+0x1b0>)
 80010ae:	430b      	orrs	r3, r1
 80010b0:	6213      	str	r3, [r2, #32]
        break;
 80010b2:	e097      	b.n	80011e4 <MGPIO_void_AltFunConfig+0x198>
          else if (copy_uddtpin<16)
 80010b4:	79bb      	ldrb	r3, [r7, #6]
 80010b6:	2b0f      	cmp	r3, #15
 80010b8:	f200 8094 	bhi.w	80011e4 <MGPIO_void_AltFunConfig+0x198>
            copy_uddtpin-=8;
 80010bc:	79bb      	ldrb	r3, [r7, #6]
 80010be:	3b08      	subs	r3, #8
 80010c0:	71bb      	strb	r3, [r7, #6]
            GPIOA->AFRH &=~(ALT_MUSK<<(4*copy_uddtpin));
 80010c2:	4b4e      	ldr	r3, [pc, #312]	@ (80011fc <MGPIO_void_AltFunConfig+0x1b0>)
 80010c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c6:	79ba      	ldrb	r2, [r7, #6]
 80010c8:	0092      	lsls	r2, r2, #2
 80010ca:	210f      	movs	r1, #15
 80010cc:	fa01 f202 	lsl.w	r2, r1, r2
 80010d0:	43d2      	mvns	r2, r2
 80010d2:	4611      	mov	r1, r2
 80010d4:	4a49      	ldr	r2, [pc, #292]	@ (80011fc <MGPIO_void_AltFunConfig+0x1b0>)
 80010d6:	400b      	ands	r3, r1
 80010d8:	6253      	str	r3, [r2, #36]	@ 0x24
            GPIOA->AFRH |=(copy_uddtaltfun<<(4*copy_uddtpin));
 80010da:	4b48      	ldr	r3, [pc, #288]	@ (80011fc <MGPIO_void_AltFunConfig+0x1b0>)
 80010dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010de:	7979      	ldrb	r1, [r7, #5]
 80010e0:	79ba      	ldrb	r2, [r7, #6]
 80010e2:	0092      	lsls	r2, r2, #2
 80010e4:	fa01 f202 	lsl.w	r2, r1, r2
 80010e8:	4611      	mov	r1, r2
 80010ea:	4a44      	ldr	r2, [pc, #272]	@ (80011fc <MGPIO_void_AltFunConfig+0x1b0>)
 80010ec:	430b      	orrs	r3, r1
 80010ee:	6253      	str	r3, [r2, #36]	@ 0x24
        break;
 80010f0:	e078      	b.n	80011e4 <MGPIO_void_AltFunConfig+0x198>
        if ((copy_uddtpin>=3)&&(copy_uddtpin<=5)){
 80010f2:	79bb      	ldrb	r3, [r7, #6]
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d902      	bls.n	80010fe <MGPIO_void_AltFunConfig+0xb2>
 80010f8:	79bb      	ldrb	r3, [r7, #6]
 80010fa:	2b05      	cmp	r3, #5
 80010fc:	d938      	bls.n	8001170 <MGPIO_void_AltFunConfig+0x124>
            if(copy_uddtpin<8){
 80010fe:	79bb      	ldrb	r3, [r7, #6]
 8001100:	2b07      	cmp	r3, #7
 8001102:	d817      	bhi.n	8001134 <MGPIO_void_AltFunConfig+0xe8>
            GPIOB->AFRL &=~(ALT_MUSK<<(4*copy_uddtpin));
 8001104:	4b3e      	ldr	r3, [pc, #248]	@ (8001200 <MGPIO_void_AltFunConfig+0x1b4>)
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	79ba      	ldrb	r2, [r7, #6]
 800110a:	0092      	lsls	r2, r2, #2
 800110c:	210f      	movs	r1, #15
 800110e:	fa01 f202 	lsl.w	r2, r1, r2
 8001112:	43d2      	mvns	r2, r2
 8001114:	4611      	mov	r1, r2
 8001116:	4a3a      	ldr	r2, [pc, #232]	@ (8001200 <MGPIO_void_AltFunConfig+0x1b4>)
 8001118:	400b      	ands	r3, r1
 800111a:	6213      	str	r3, [r2, #32]
            GPIOB->AFRL |=(copy_uddtaltfun<<(4*copy_uddtpin));
 800111c:	4b38      	ldr	r3, [pc, #224]	@ (8001200 <MGPIO_void_AltFunConfig+0x1b4>)
 800111e:	6a1b      	ldr	r3, [r3, #32]
 8001120:	7979      	ldrb	r1, [r7, #5]
 8001122:	79ba      	ldrb	r2, [r7, #6]
 8001124:	0092      	lsls	r2, r2, #2
 8001126:	fa01 f202 	lsl.w	r2, r1, r2
 800112a:	4611      	mov	r1, r2
 800112c:	4a34      	ldr	r2, [pc, #208]	@ (8001200 <MGPIO_void_AltFunConfig+0x1b4>)
 800112e:	430b      	orrs	r3, r1
 8001130:	6213      	str	r3, [r2, #32]
        break;
 8001132:	e059      	b.n	80011e8 <MGPIO_void_AltFunConfig+0x19c>
          else if (copy_uddtpin<16)
 8001134:	79bb      	ldrb	r3, [r7, #6]
 8001136:	2b0f      	cmp	r3, #15
 8001138:	d856      	bhi.n	80011e8 <MGPIO_void_AltFunConfig+0x19c>
            copy_uddtpin-=8;
 800113a:	79bb      	ldrb	r3, [r7, #6]
 800113c:	3b08      	subs	r3, #8
 800113e:	71bb      	strb	r3, [r7, #6]
            GPIOB->AFRH &=~(ALT_MUSK<<(4*copy_uddtpin));
 8001140:	4b2f      	ldr	r3, [pc, #188]	@ (8001200 <MGPIO_void_AltFunConfig+0x1b4>)
 8001142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001144:	79ba      	ldrb	r2, [r7, #6]
 8001146:	0092      	lsls	r2, r2, #2
 8001148:	210f      	movs	r1, #15
 800114a:	fa01 f202 	lsl.w	r2, r1, r2
 800114e:	43d2      	mvns	r2, r2
 8001150:	4611      	mov	r1, r2
 8001152:	4a2b      	ldr	r2, [pc, #172]	@ (8001200 <MGPIO_void_AltFunConfig+0x1b4>)
 8001154:	400b      	ands	r3, r1
 8001156:	6253      	str	r3, [r2, #36]	@ 0x24
            GPIOB->AFRH |=(copy_uddtaltfun<<(4*copy_uddtpin));
 8001158:	4b29      	ldr	r3, [pc, #164]	@ (8001200 <MGPIO_void_AltFunConfig+0x1b4>)
 800115a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800115c:	7979      	ldrb	r1, [r7, #5]
 800115e:	79ba      	ldrb	r2, [r7, #6]
 8001160:	0092      	lsls	r2, r2, #2
 8001162:	fa01 f202 	lsl.w	r2, r1, r2
 8001166:	4611      	mov	r1, r2
 8001168:	4a25      	ldr	r2, [pc, #148]	@ (8001200 <MGPIO_void_AltFunConfig+0x1b4>)
 800116a:	430b      	orrs	r3, r1
 800116c:	6253      	str	r3, [r2, #36]	@ 0x24
        break;
 800116e:	e03b      	b.n	80011e8 <MGPIO_void_AltFunConfig+0x19c>
 8001170:	e03a      	b.n	80011e8 <MGPIO_void_AltFunConfig+0x19c>
           if(copy_uddtpin<8){
 8001172:	79bb      	ldrb	r3, [r7, #6]
 8001174:	2b07      	cmp	r3, #7
 8001176:	d817      	bhi.n	80011a8 <MGPIO_void_AltFunConfig+0x15c>
            GPIOC->AFRL &=~(ALT_MUSK<<(4*copy_uddtpin));
 8001178:	4b22      	ldr	r3, [pc, #136]	@ (8001204 <MGPIO_void_AltFunConfig+0x1b8>)
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	79ba      	ldrb	r2, [r7, #6]
 800117e:	0092      	lsls	r2, r2, #2
 8001180:	210f      	movs	r1, #15
 8001182:	fa01 f202 	lsl.w	r2, r1, r2
 8001186:	43d2      	mvns	r2, r2
 8001188:	4611      	mov	r1, r2
 800118a:	4a1e      	ldr	r2, [pc, #120]	@ (8001204 <MGPIO_void_AltFunConfig+0x1b8>)
 800118c:	400b      	ands	r3, r1
 800118e:	6213      	str	r3, [r2, #32]
            GPIOC->AFRL |=(copy_uddtaltfun<<(4*copy_uddtpin));
 8001190:	4b1c      	ldr	r3, [pc, #112]	@ (8001204 <MGPIO_void_AltFunConfig+0x1b8>)
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	7979      	ldrb	r1, [r7, #5]
 8001196:	79ba      	ldrb	r2, [r7, #6]
 8001198:	0092      	lsls	r2, r2, #2
 800119a:	fa01 f202 	lsl.w	r2, r1, r2
 800119e:	4611      	mov	r1, r2
 80011a0:	4a18      	ldr	r2, [pc, #96]	@ (8001204 <MGPIO_void_AltFunConfig+0x1b8>)
 80011a2:	430b      	orrs	r3, r1
 80011a4:	6213      	str	r3, [r2, #32]
        break; 
 80011a6:	e021      	b.n	80011ec <MGPIO_void_AltFunConfig+0x1a0>
          else if (copy_uddtpin<16)
 80011a8:	79bb      	ldrb	r3, [r7, #6]
 80011aa:	2b0f      	cmp	r3, #15
 80011ac:	d81e      	bhi.n	80011ec <MGPIO_void_AltFunConfig+0x1a0>
            copy_uddtpin-=8;
 80011ae:	79bb      	ldrb	r3, [r7, #6]
 80011b0:	3b08      	subs	r3, #8
 80011b2:	71bb      	strb	r3, [r7, #6]
            GPIOC->AFRH &=~(ALT_MUSK<<(4*copy_uddtpin));
 80011b4:	4b13      	ldr	r3, [pc, #76]	@ (8001204 <MGPIO_void_AltFunConfig+0x1b8>)
 80011b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b8:	79ba      	ldrb	r2, [r7, #6]
 80011ba:	0092      	lsls	r2, r2, #2
 80011bc:	210f      	movs	r1, #15
 80011be:	fa01 f202 	lsl.w	r2, r1, r2
 80011c2:	43d2      	mvns	r2, r2
 80011c4:	4611      	mov	r1, r2
 80011c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001204 <MGPIO_void_AltFunConfig+0x1b8>)
 80011c8:	400b      	ands	r3, r1
 80011ca:	6253      	str	r3, [r2, #36]	@ 0x24
            GPIOC->AFRH |=(copy_uddtaltfun<<(4*copy_uddtpin));
 80011cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001204 <MGPIO_void_AltFunConfig+0x1b8>)
 80011ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d0:	7979      	ldrb	r1, [r7, #5]
 80011d2:	79ba      	ldrb	r2, [r7, #6]
 80011d4:	0092      	lsls	r2, r2, #2
 80011d6:	fa01 f202 	lsl.w	r2, r1, r2
 80011da:	4611      	mov	r1, r2
 80011dc:	4a09      	ldr	r2, [pc, #36]	@ (8001204 <MGPIO_void_AltFunConfig+0x1b8>)
 80011de:	430b      	orrs	r3, r1
 80011e0:	6253      	str	r3, [r2, #36]	@ 0x24
        break; 
 80011e2:	e003      	b.n	80011ec <MGPIO_void_AltFunConfig+0x1a0>
        break;
 80011e4:	bf00      	nop
 80011e6:	e002      	b.n	80011ee <MGPIO_void_AltFunConfig+0x1a2>
        break;
 80011e8:	bf00      	nop
 80011ea:	e000      	b.n	80011ee <MGPIO_void_AltFunConfig+0x1a2>
        break; 
 80011ec:	bf00      	nop
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40020000 	.word	0x40020000
 8001200:	40020400 	.word	0x40020400
 8001204:	40020800 	.word	0x40020800

08001208 <MRCC_Init>:
#include "MRCC_Interface.h"
#include "MRCC_Private.h"
#include "MRCC_Config.h"

void MRCC_Init()
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
	/******************HSI_Config******************/
	#if (SYSTEM_CLOCK==HSI_CLOCK)
	//HSI ON
	 RCC->CR |= (1<<HSION);  //SET_BIT(RCC->CR,HSION)
 800120c:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <MRCC_Init+0x40>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0d      	ldr	r2, [pc, #52]	@ (8001248 <MRCC_Init+0x40>)
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	6013      	str	r3, [r2, #0]
	//Wait till ready
     while (!GET_BIT(RCC->CR,HSIRDY));
 8001218:	bf00      	nop
 800121a:	4b0b      	ldr	r3, [pc, #44]	@ (8001248 <MRCC_Init+0x40>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	085b      	lsrs	r3, r3, #1
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0f8      	beq.n	800121a <MRCC_Init+0x12>
    //Switch HSI
     RCC->CFGR &=~(SW_MUSK<<SW0);
 8001228:	4b07      	ldr	r3, [pc, #28]	@ (8001248 <MRCC_Init+0x40>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	4a06      	ldr	r2, [pc, #24]	@ (8001248 <MRCC_Init+0x40>)
 800122e:	f023 0303 	bic.w	r3, r3, #3
 8001232:	6093      	str	r3, [r2, #8]
     RCC->CFGR |=(HSI_OSC<<SW0);
 8001234:	4b04      	ldr	r3, [pc, #16]	@ (8001248 <MRCC_Init+0x40>)
 8001236:	4a04      	ldr	r2, [pc, #16]	@ (8001248 <MRCC_Init+0x40>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	6093      	str	r3, [r2, #8]
     RCC->CFGR |=(PLL_OSC<<SW0);
    //Disable HSI
     RCC->CR &=~(1<<HSION);
     RCC->CR &=~(1<<HSEON);
	#endif
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800

0800124c <MRCC_EnablePeripheral>:

void MRCC_EnablePeripheral(System_Bus_t Copy_uddtBus, u8 Copy_uddtperipheral)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	460a      	mov	r2, r1
 8001256:	71fb      	strb	r3, [r7, #7]
 8001258:	4613      	mov	r3, r2
 800125a:	71bb      	strb	r3, [r7, #6]
	switch(Copy_uddtBus)
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	2b03      	cmp	r3, #3
 8001260:	d836      	bhi.n	80012d0 <MRCC_EnablePeripheral+0x84>
 8001262:	a201      	add	r2, pc, #4	@ (adr r2, 8001268 <MRCC_EnablePeripheral+0x1c>)
 8001264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001268:	08001279 	.word	0x08001279
 800126c:	0800128f 	.word	0x0800128f
 8001270:	080012a5 	.word	0x080012a5
 8001274:	080012bb 	.word	0x080012bb
	{
	case AHB1_BUS:
		RCC->AHB1ENR |=(1<<Copy_uddtperipheral);
 8001278:	4b19      	ldr	r3, [pc, #100]	@ (80012e0 <MRCC_EnablePeripheral+0x94>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127c:	79ba      	ldrb	r2, [r7, #6]
 800127e:	2101      	movs	r1, #1
 8001280:	fa01 f202 	lsl.w	r2, r1, r2
 8001284:	4611      	mov	r1, r2
 8001286:	4a16      	ldr	r2, [pc, #88]	@ (80012e0 <MRCC_EnablePeripheral+0x94>)
 8001288:	430b      	orrs	r3, r1
 800128a:	6313      	str	r3, [r2, #48]	@ 0x30
		break;
 800128c:	e021      	b.n	80012d2 <MRCC_EnablePeripheral+0x86>
	case AHB2_BUS:
		RCC->AHB2ENR |=(1<<Copy_uddtperipheral);
 800128e:	4b14      	ldr	r3, [pc, #80]	@ (80012e0 <MRCC_EnablePeripheral+0x94>)
 8001290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001292:	79ba      	ldrb	r2, [r7, #6]
 8001294:	2101      	movs	r1, #1
 8001296:	fa01 f202 	lsl.w	r2, r1, r2
 800129a:	4611      	mov	r1, r2
 800129c:	4a10      	ldr	r2, [pc, #64]	@ (80012e0 <MRCC_EnablePeripheral+0x94>)
 800129e:	430b      	orrs	r3, r1
 80012a0:	6353      	str	r3, [r2, #52]	@ 0x34
		break;
 80012a2:	e016      	b.n	80012d2 <MRCC_EnablePeripheral+0x86>
	case APB1_BUS:
		RCC->APB1ENR |=(1<<Copy_uddtperipheral);
 80012a4:	4b0e      	ldr	r3, [pc, #56]	@ (80012e0 <MRCC_EnablePeripheral+0x94>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a8:	79ba      	ldrb	r2, [r7, #6]
 80012aa:	2101      	movs	r1, #1
 80012ac:	fa01 f202 	lsl.w	r2, r1, r2
 80012b0:	4611      	mov	r1, r2
 80012b2:	4a0b      	ldr	r2, [pc, #44]	@ (80012e0 <MRCC_EnablePeripheral+0x94>)
 80012b4:	430b      	orrs	r3, r1
 80012b6:	6413      	str	r3, [r2, #64]	@ 0x40
		break;
 80012b8:	e00b      	b.n	80012d2 <MRCC_EnablePeripheral+0x86>
	case APB2_BUS:
		RCC->APB2ENR |=(1<<Copy_uddtperipheral);
 80012ba:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <MRCC_EnablePeripheral+0x94>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012be:	79ba      	ldrb	r2, [r7, #6]
 80012c0:	2101      	movs	r1, #1
 80012c2:	fa01 f202 	lsl.w	r2, r1, r2
 80012c6:	4611      	mov	r1, r2
 80012c8:	4a05      	ldr	r2, [pc, #20]	@ (80012e0 <MRCC_EnablePeripheral+0x94>)
 80012ca:	430b      	orrs	r3, r1
 80012cc:	6453      	str	r3, [r2, #68]	@ 0x44
		break;
 80012ce:	e000      	b.n	80012d2 <MRCC_EnablePeripheral+0x86>
	default:
	   break;
 80012d0:	bf00      	nop
	}
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800

080012e4 <MSPI_voidMasterInit>:
#include "MSPI_Interface.h"
#include "MSPI_Private.h"


void MSPI_voidMasterInit()
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
	//Hardware or software SSM/SSI
	SPI1->CR1 |=(1<<SSM);
 80012e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001354 <MSPI_voidMasterInit+0x70>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a19      	ldr	r2, [pc, #100]	@ (8001354 <MSPI_voidMasterInit+0x70>)
 80012ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012f2:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |=(1<<SSI);
 80012f4:	4b17      	ldr	r3, [pc, #92]	@ (8001354 <MSPI_voidMasterInit+0x70>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a16      	ldr	r2, [pc, #88]	@ (8001354 <MSPI_voidMasterInit+0x70>)
 80012fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012fe:	6013      	str	r3, [r2, #0]
	//Master mode
	SPI1->CR1 |=(1<<MSTR);
 8001300:	4b14      	ldr	r3, [pc, #80]	@ (8001354 <MSPI_voidMasterInit+0x70>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a13      	ldr	r2, [pc, #76]	@ (8001354 <MSPI_voidMasterInit+0x70>)
 8001306:	f043 0304 	orr.w	r3, r3, #4
 800130a:	6013      	str	r3, [r2, #0]
	//Direction (Full duplex)
	SPI1->CR1 &=~(1<<BIDIMODE);
 800130c:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <MSPI_voidMasterInit+0x70>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a10      	ldr	r2, [pc, #64]	@ (8001354 <MSPI_voidMasterInit+0x70>)
 8001312:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001316:	6013      	str	r3, [r2, #0]
	//MSB or LSB
	SPI1->CR1 &=~(1<<LSBFIRST);
 8001318:	4b0e      	ldr	r3, [pc, #56]	@ (8001354 <MSPI_voidMasterInit+0x70>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a0d      	ldr	r2, [pc, #52]	@ (8001354 <MSPI_voidMasterInit+0x70>)
 800131e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001322:	6013      	str	r3, [r2, #0]
	//CPOL
	SPI1->CR1 |=(1<<CPOL);
 8001324:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <MSPI_voidMasterInit+0x70>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a0a      	ldr	r2, [pc, #40]	@ (8001354 <MSPI_voidMasterInit+0x70>)
 800132a:	f043 0302 	orr.w	r3, r3, #2
 800132e:	6013      	str	r3, [r2, #0]
	//CPHA
	SPI1->CR1 &=~(1<<CPHA);
 8001330:	4b08      	ldr	r3, [pc, #32]	@ (8001354 <MSPI_voidMasterInit+0x70>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a07      	ldr	r2, [pc, #28]	@ (8001354 <MSPI_voidMasterInit+0x70>)
 8001336:	f023 0301 	bic.w	r3, r3, #1
 800133a:	6013      	str	r3, [r2, #0]
	//clock
	//SPI1->CR1 &=~(CLK_MUSK<<BR0);
	//SPE enable
	SPI1->CR1 |=(1<<SPE);
 800133c:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <MSPI_voidMasterInit+0x70>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a04      	ldr	r2, [pc, #16]	@ (8001354 <MSPI_voidMasterInit+0x70>)
 8001342:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001346:	6013      	str	r3, [r2, #0]

}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40013000 	.word	0x40013000

08001358 <MSPI_u16Tranceive>:
	//SPI1->CR1 &=~(CLK_MUSK<<BR0);
	//SPE enable
	SPI1->CR1 |=(1<<SPE);
}
u16 MSPI_u16Tranceive(u16 Copy_u16Data)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	80fb      	strh	r3, [r7, #6]
	//Wait till Transmit
	while(!GET_BIT(SPI1->SR,TXE));
 8001362:	bf00      	nop
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <MSPI_u16Tranceive+0x40>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	085b      	lsrs	r3, r3, #1
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f8      	beq.n	8001364 <MSPI_u16Tranceive+0xc>
	SPI1->DR=Copy_u16Data;
 8001372:	4a09      	ldr	r2, [pc, #36]	@ (8001398 <MSPI_u16Tranceive+0x40>)
 8001374:	88fb      	ldrh	r3, [r7, #6]
 8001376:	60d3      	str	r3, [r2, #12]
	//Wait till Receive
	while(!GET_BIT(SPI1->SR,RXNE));
 8001378:	bf00      	nop
 800137a:	4b07      	ldr	r3, [pc, #28]	@ (8001398 <MSPI_u16Tranceive+0x40>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f9      	beq.n	800137a <MSPI_u16Tranceive+0x22>
	return (u16)(SPI1->DR);
 8001386:	4b04      	ldr	r3, [pc, #16]	@ (8001398 <MSPI_u16Tranceive+0x40>)
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	b29b      	uxth	r3, r3

}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	40013000 	.word	0x40013000

0800139c <MSTK_voidInit>:

static void (*Global_ptr)(void)=NULL;
static volatile u8 flag=0;

void MSTK_voidInit()
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
	#if (STK_SYSTEM_CLK==STK_AHB_8)
		STK->CTRL&=~(1<<CLOCK_SOURCE);
 80013a0:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <MSTK_voidInit+0x28>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a07      	ldr	r2, [pc, #28]	@ (80013c4 <MSTK_voidInit+0x28>)
 80013a6:	f023 0304 	bic.w	r3, r3, #4
 80013aa:	6013      	str	r3, [r2, #0]
	    STK->CTRL&=~(1<<STK_ENABLE);
 80013ac:	4b05      	ldr	r3, [pc, #20]	@ (80013c4 <MSTK_voidInit+0x28>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a04      	ldr	r2, [pc, #16]	@ (80013c4 <MSTK_voidInit+0x28>)
 80013b2:	f023 0301 	bic.w	r3, r3, #1
 80013b6:	6013      	str	r3, [r2, #0]
	#elif (STK_SYSTEM_CLK==STK_AHB)
		STK->CTRL|=(1<<CLOCK_SOURCE);
	STK->CTRL&=~(1<<STK_ENABLE);
	#endif
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000e010 	.word	0xe000e010

080013c8 <MSTK_voidStartTimer>:
void MSTK_voidStartTimer(u32 Copy_u32ReloadValue)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	STK->LOAD=Copy_u32ReloadValue;
 80013d0:	4a08      	ldr	r2, [pc, #32]	@ (80013f4 <MSTK_voidStartTimer+0x2c>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6053      	str	r3, [r2, #4]
	STK->VAL=0;
 80013d6:	4b07      	ldr	r3, [pc, #28]	@ (80013f4 <MSTK_voidStartTimer+0x2c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
	STK->CTRL|=(1<<STK_ENABLE);
 80013dc:	4b05      	ldr	r3, [pc, #20]	@ (80013f4 <MSTK_voidStartTimer+0x2c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a04      	ldr	r2, [pc, #16]	@ (80013f4 <MSTK_voidStartTimer+0x2c>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	6013      	str	r3, [r2, #0]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000e010 	.word	0xe000e010

080013f8 <MSTK_voidCtrlIntState>:
void MSTK_voidCtrlIntState(STK_IntState Copy_uddtIntState)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
	STK->CTRL|=(Copy_uddtIntState<<TICKINT);
 8001402:	4b06      	ldr	r3, [pc, #24]	@ (800141c <MSTK_voidCtrlIntState+0x24>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4904      	ldr	r1, [pc, #16]	@ (800141c <MSTK_voidCtrlIntState+0x24>)
 800140c:	4313      	orrs	r3, r2
 800140e:	600b      	str	r3, [r1, #0]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000e010 	.word	0xe000e010

08001420 <MSTK_u8ReadFlag>:
u8 MSTK_u8ReadFlag()
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
	return GET_BIT(STK->CTRL,COUNT_FLAG);
 8001424:	4b05      	ldr	r3, [pc, #20]	@ (800143c <MSTK_u8ReadFlag+0x1c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	0c1b      	lsrs	r3, r3, #16
 800142a:	b2db      	uxtb	r3, r3
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	b2db      	uxtb	r3, r3
}
 8001432:	4618      	mov	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000e010 	.word	0xe000e010

08001440 <MSTK_voidDelayms>:
{
	return (STK->VAL);
}

void MSTK_voidDelayms(u32 Copy_u32Delayms)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	MSTK_voidCtrlIntState(Systick_IntDisable);
 8001448:	2000      	movs	r0, #0
 800144a:	f7ff ffd5 	bl	80013f8 <MSTK_voidCtrlIntState>
	MSTK_voidStartTimer(Copy_u32Delayms*2000);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001454:	fb02 f303 	mul.w	r3, r2, r3
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ffb5 	bl	80013c8 <MSTK_voidStartTimer>
	while(MSTK_u8ReadFlag()==0);
 800145e:	bf00      	nop
 8001460:	f7ff ffde 	bl	8001420 <MSTK_u8ReadFlag>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0fa      	beq.n	8001460 <MSTK_voidDelayms+0x20>
	STK->CTRL&=~(1<<STK_ENABLE);
 800146a:	4b05      	ldr	r3, [pc, #20]	@ (8001480 <MSTK_voidDelayms+0x40>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a04      	ldr	r2, [pc, #16]	@ (8001480 <MSTK_voidDelayms+0x40>)
 8001470:	f023 0301 	bic.w	r3, r3, #1
 8001474:	6013      	str	r3, [r2, #0]
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	e000e010 	.word	0xe000e010

08001484 <MSTK_voidDelayus>:
void MSTK_voidDelayus(u32 Copy_u32Delayus)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	MSTK_voidCtrlIntState(Systick_IntDisable);
 800148c:	2000      	movs	r0, #0
 800148e:	f7ff ffb3 	bl	80013f8 <MSTK_voidCtrlIntState>
	MSTK_voidStartTimer(Copy_u32Delayus*2);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff ff96 	bl	80013c8 <MSTK_voidStartTimer>
	while(MSTK_u8ReadFlag()==0);
 800149c:	bf00      	nop
 800149e:	f7ff ffbf 	bl	8001420 <MSTK_u8ReadFlag>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0fa      	beq.n	800149e <MSTK_voidDelayus+0x1a>
	STK->CTRL&=~(1<<STK_ENABLE);
 80014a8:	4b04      	ldr	r3, [pc, #16]	@ (80014bc <MSTK_voidDelayus+0x38>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a03      	ldr	r2, [pc, #12]	@ (80014bc <MSTK_voidDelayus+0x38>)
 80014ae:	f023 0301 	bic.w	r3, r3, #1
 80014b2:	6013      	str	r3, [r2, #0]
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	e000e010 	.word	0xe000e010

080014c0 <SysTick_Handler>:
	Global_ptr=ptr;
	MSTK_voidStartTimer(Copy_u32TickTime*2);
}

void SysTick_Handler()
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
	if(Global_ptr!=NULL)
 80014c4:	4b08      	ldr	r3, [pc, #32]	@ (80014e8 <SysTick_Handler+0x28>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d002      	beq.n	80014d2 <SysTick_Handler+0x12>
	{
		Global_ptr();
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <SysTick_Handler+0x28>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4798      	blx	r3
	}
	if(flag==1)
 80014d2:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <SysTick_Handler+0x2c>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d102      	bne.n	80014e2 <SysTick_Handler+0x22>
	{
		MSTK_voidCtrlIntState(Systick_IntDisable);
 80014dc:	2000      	movs	r0, #0
 80014de:	f7ff ff8b 	bl	80013f8 <MSTK_voidCtrlIntState>
	}
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	2000a06c 	.word	0x2000a06c
 80014ec:	2000a070 	.word	0x2000a070

080014f0 <MUSART1_voidInit>:
#include "MUSART_Interface.h"
#include "MUSART_Private.h"


void MUSART1_voidInit()
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
    // Oversampling = 16
	USART1->CR1.OVER8=0;
 80014f4:	4a13      	ldr	r2, [pc, #76]	@ (8001544 <MUSART1_voidInit+0x54>)
 80014f6:	68d3      	ldr	r3, [r2, #12]
 80014f8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80014fc:	60d3      	str	r3, [r2, #12]
	// Baud rate = 115200 @ 16 MHz
	USART1->BRR = (104 << 4) | 3;   // 0x0683
 80014fe:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <MUSART1_voidInit+0x54>)
 8001500:	f240 6283 	movw	r2, #1667	@ 0x683
 8001504:	609a      	str	r2, [r3, #8]
    // Word length = 8 bit
    USART1->CR1.M=0;
 8001506:	4a0f      	ldr	r2, [pc, #60]	@ (8001544 <MUSART1_voidInit+0x54>)
 8001508:	68d3      	ldr	r3, [r2, #12]
 800150a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800150e:	60d3      	str	r3, [r2, #12]
    // Disable parity
    USART1->CR1.PCE=0;
 8001510:	4a0c      	ldr	r2, [pc, #48]	@ (8001544 <MUSART1_voidInit+0x54>)
 8001512:	68d3      	ldr	r3, [r2, #12]
 8001514:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001518:	60d3      	str	r3, [r2, #12]
    // Enable USART
    USART1->CR1.UE=1;
 800151a:	4a0a      	ldr	r2, [pc, #40]	@ (8001544 <MUSART1_voidInit+0x54>)
 800151c:	68d3      	ldr	r3, [r2, #12]
 800151e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001522:	60d3      	str	r3, [r2, #12]
    // Enable TX
    USART1->CR1.TE=1;
 8001524:	4a07      	ldr	r2, [pc, #28]	@ (8001544 <MUSART1_voidInit+0x54>)
 8001526:	68d3      	ldr	r3, [r2, #12]
 8001528:	f043 0308 	orr.w	r3, r3, #8
 800152c:	60d3      	str	r3, [r2, #12]
    // Enable RX
    USART1->CR1.RE=1;
 800152e:	4a05      	ldr	r2, [pc, #20]	@ (8001544 <MUSART1_voidInit+0x54>)
 8001530:	68d3      	ldr	r3, [r2, #12]
 8001532:	f043 0304 	orr.w	r3, r3, #4
 8001536:	60d3      	str	r3, [r2, #12]
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40011000 	.word	0x40011000

08001548 <MUSART1_voidSendData>:

void MUSART1_voidSendData(u8 Copy_u8Data)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
    //Wait until TXE
    while (!GET_BIT(USART1->SR,TXE));
 8001552:	bf00      	nop
 8001554:	4b07      	ldr	r3, [pc, #28]	@ (8001574 <MUSART1_voidSendData+0x2c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	09db      	lsrs	r3, r3, #7
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f8      	beq.n	8001554 <MUSART1_voidSendData+0xc>
    USART1->DR = Copy_u8Data ;
 8001562:	4a04      	ldr	r2, [pc, #16]	@ (8001574 <MUSART1_voidSendData+0x2c>)
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	6053      	str	r3, [r2, #4]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	40011000 	.word	0x40011000

08001578 <MUSART1_voidSendString>:
    while (!GET_BIT(USART1->SR,RXNE));
    return (u8)(USART1->DR);
}

void MUSART1_voidSendString(u8 *Copy_pu8Str)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
    u8 i = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	73fb      	strb	r3, [r7, #15]
    // Loop until the null terminator '\0'
    while (Copy_pu8Str[i] != '\0')
 8001584:	e009      	b.n	800159a <MUSART1_voidSendString+0x22>
    {
        // Send each character
        MUSART1_voidSendData(Copy_pu8Str[i]);
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	4413      	add	r3, r2
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff ffda 	bl	8001548 <MUSART1_voidSendData>
        i++;
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	3301      	adds	r3, #1
 8001598:	73fb      	strb	r3, [r7, #15]
    while (Copy_pu8Str[i] != '\0')
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	4413      	add	r3, r2
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1ef      	bne.n	8001586 <MUSART1_voidSendString+0xe>
    }
}
 80015a6:	bf00      	nop
 80015a8:	bf00      	nop
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <Convert_ADCValue_To_Temperature>:
#define ADC_RESOLUTION  4095.0
#define LM35_SCALE      100

// Convert ADC raw value to temperature in Celsius
u32 Convert_ADCValue_To_Temperature(u16 adc_val)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	80fb      	strh	r3, [r7, #6]
    u32 temperature = (((u32)adc_val * VREF * LM35_SCALE) / ADC_RESOLUTION);
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ffa1 	bl	8000504 <__aeabi_ui2d>
 80015c2:	a316      	add	r3, pc, #88	@ (adr r3, 800161c <Convert_ADCValue_To_Temperature+0x6c>)
 80015c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c8:	f7ff f816 	bl	80005f8 <__aeabi_dmul>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4610      	mov	r0, r2
 80015d2:	4619      	mov	r1, r3
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001618 <Convert_ADCValue_To_Temperature+0x68>)
 80015da:	f7ff f80d 	bl	80005f8 <__aeabi_dmul>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4610      	mov	r0, r2
 80015e4:	4619      	mov	r1, r3
 80015e6:	a30a      	add	r3, pc, #40	@ (adr r3, 8001610 <Convert_ADCValue_To_Temperature+0x60>)
 80015e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ec:	f7ff f92e 	bl	800084c <__aeabi_ddiv>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff fa10 	bl	8000a1c <__aeabi_d2uiz>
 80015fc:	4603      	mov	r3, r0
 80015fe:	60fb      	str	r3, [r7, #12]
    return temperature;
 8001600:	68fb      	ldr	r3, [r7, #12]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	f3af 8000 	nop.w
 8001610:	00000000 	.word	0x00000000
 8001614:	40affe00 	.word	0x40affe00
 8001618:	40590000 	.word	0x40590000
 800161c:	66666666 	.word	0x66666666
 8001620:	400a6666 	.word	0x400a6666

08001624 <main>:

int main(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0
    // ---------------- RCC (Clock System) ----------------
    MRCC_Init();
 800162a:	f7ff fded 	bl	8001208 <MRCC_Init>
    MRCC_EnablePeripheral(AHB1_BUS, GPIOA);   // Enable GPIOA
 800162e:	2100      	movs	r1, #0
 8001630:	2000      	movs	r0, #0
 8001632:	f7ff fe0b 	bl	800124c <MRCC_EnablePeripheral>
    MRCC_EnablePeripheral(APB2_BUS, SPI1);    // Enable SPI1
 8001636:	210c      	movs	r1, #12
 8001638:	2003      	movs	r0, #3
 800163a:	f7ff fe07 	bl	800124c <MRCC_EnablePeripheral>
    MRCC_EnablePeripheral(APB2_BUS, USART1);  // Enable USART1
 800163e:	2104      	movs	r1, #4
 8001640:	2003      	movs	r0, #3
 8001642:	f7ff fe03 	bl	800124c <MRCC_EnablePeripheral>
    MRCC_EnablePeripheral(APB2_BUS, ADC1);    // Enable ADC1
 8001646:	2108      	movs	r1, #8
 8001648:	2003      	movs	r0, #3
 800164a:	f7ff fdff 	bl	800124c <MRCC_EnablePeripheral>

    // ---------------- SPI Pins (for TFT) ----------------
    MGPIO_void_SetPinMode(PORTA, PIN5, ALTERNATIVE_FUNC);   // PA5 -> SCK
 800164e:	2202      	movs	r2, #2
 8001650:	2105      	movs	r1, #5
 8001652:	2000      	movs	r0, #0
 8001654:	f7ff fb1a 	bl	8000c8c <MGPIO_void_SetPinMode>
    MGPIO_void_AltFunConfig(PORTA, PIN5, AF5);
 8001658:	2205      	movs	r2, #5
 800165a:	2105      	movs	r1, #5
 800165c:	2000      	movs	r0, #0
 800165e:	f7ff fcf5 	bl	800104c <MGPIO_void_AltFunConfig>
    MGPIO_void_SetPinMode(PORTA, PIN7, ALTERNATIVE_FUNC);   // PA7 -> MOSI
 8001662:	2202      	movs	r2, #2
 8001664:	2107      	movs	r1, #7
 8001666:	2000      	movs	r0, #0
 8001668:	f7ff fb10 	bl	8000c8c <MGPIO_void_SetPinMode>
    MGPIO_void_AltFunConfig(PORTA, PIN7, AF5);
 800166c:	2205      	movs	r2, #5
 800166e:	2107      	movs	r1, #7
 8001670:	2000      	movs	r0, #0
 8001672:	f7ff fceb 	bl	800104c <MGPIO_void_AltFunConfig>

    // ---------------- USART1 Pins ----------------
    MGPIO_void_SetPinMode(PORTA, PIN9, ALTERNATIVE_FUNC);   // PA9  -> TX
 8001676:	2202      	movs	r2, #2
 8001678:	2109      	movs	r1, #9
 800167a:	2000      	movs	r0, #0
 800167c:	f7ff fb06 	bl	8000c8c <MGPIO_void_SetPinMode>
    MGPIO_void_AltFunConfig(PORTA, PIN9, AF7);
 8001680:	2207      	movs	r2, #7
 8001682:	2109      	movs	r1, #9
 8001684:	2000      	movs	r0, #0
 8001686:	f7ff fce1 	bl	800104c <MGPIO_void_AltFunConfig>
    MGPIO_void_SetPinMode(PORTA, PIN10, ALTERNATIVE_FUNC);  // PA10 -> RX
 800168a:	2202      	movs	r2, #2
 800168c:	210a      	movs	r1, #10
 800168e:	2000      	movs	r0, #0
 8001690:	f7ff fafc 	bl	8000c8c <MGPIO_void_SetPinMode>
    MGPIO_void_AltFunConfig(PORTA, PIN10, AF7);
 8001694:	2207      	movs	r2, #7
 8001696:	210a      	movs	r1, #10
 8001698:	2000      	movs	r0, #0
 800169a:	f7ff fcd7 	bl	800104c <MGPIO_void_AltFunConfig>

    // ---------------- ADC Input Pin ----------------
    MGPIO_void_SetPinMode(PORTA, PIN2, ANALOG); // PA2 (ADC1_IN2) for LM35
 800169e:	2203      	movs	r2, #3
 80016a0:	2102      	movs	r1, #2
 80016a2:	2000      	movs	r0, #0
 80016a4:	f7ff faf2 	bl	8000c8c <MGPIO_void_SetPinMode>

    // ---------------- LEDs Output ----------------
    // Cold LED on PA3
    MGPIO_void_SetPinMode(PORTA, PIN3, OUTPUT);
 80016a8:	2201      	movs	r2, #1
 80016aa:	2103      	movs	r1, #3
 80016ac:	2000      	movs	r0, #0
 80016ae:	f7ff faed 	bl	8000c8c <MGPIO_void_SetPinMode>
    MGPIO_void_OutputConfig(PORTA, PIN3, PUSH_PULL, LOW_SPEED);
 80016b2:	2300      	movs	r3, #0
 80016b4:	2200      	movs	r2, #0
 80016b6:	2103      	movs	r1, #3
 80016b8:	2000      	movs	r0, #0
 80016ba:	f7ff fb57 	bl	8000d6c <MGPIO_void_OutputConfig>
    // Warm LED on PA4
    MGPIO_void_SetPinMode(PORTA, PIN4, OUTPUT);
 80016be:	2201      	movs	r2, #1
 80016c0:	2104      	movs	r1, #4
 80016c2:	2000      	movs	r0, #0
 80016c4:	f7ff fae2 	bl	8000c8c <MGPIO_void_SetPinMode>
    MGPIO_void_OutputConfig(PORTA, PIN4, PUSH_PULL, LOW_SPEED);
 80016c8:	2300      	movs	r3, #0
 80016ca:	2200      	movs	r2, #0
 80016cc:	2104      	movs	r1, #4
 80016ce:	2000      	movs	r0, #0
 80016d0:	f7ff fb4c 	bl	8000d6c <MGPIO_void_OutputConfig>
    // Hot LED on PA6
    MGPIO_void_SetPinMode(PORTA, PIN6, OUTPUT);
 80016d4:	2201      	movs	r2, #1
 80016d6:	2106      	movs	r1, #6
 80016d8:	2000      	movs	r0, #0
 80016da:	f7ff fad7 	bl	8000c8c <MGPIO_void_SetPinMode>
    MGPIO_void_OutputConfig(PORTA, PIN6, PUSH_PULL, LOW_SPEED);
 80016de:	2300      	movs	r3, #0
 80016e0:	2200      	movs	r2, #0
 80016e2:	2106      	movs	r1, #6
 80016e4:	2000      	movs	r0, #0
 80016e6:	f7ff fb41 	bl	8000d6c <MGPIO_void_OutputConfig>

    // ---------------- Peripherals Init ----------------
    MSTK_voidInit();           // Systick (for delay)
 80016ea:	f7ff fe57 	bl	800139c <MSTK_voidInit>
    MSPI_voidMasterInit();     // SPI Master (for TFT)
 80016ee:	f7ff fdf9 	bl	80012e4 <MSPI_voidMasterInit>
    HTFT_voidInit();           // TFT Init
 80016f2:	f7ff f9b3 	bl	8000a5c <HTFT_voidInit>
    MADC1_voidInit();          // ADC Init
 80016f6:	f7ff fa73 	bl	8000be0 <MADC1_voidInit>
    MUSART1_voidInit();        // USART1 Init @ 9600 baud
 80016fa:	f7ff fef9 	bl	80014f0 <MUSART1_voidInit>

    // ---------------- Display Project Logo ----------------
    HTFT_voidDisplay(Image_Project);
 80016fe:	4835      	ldr	r0, [pc, #212]	@ (80017d4 <main+0x1b0>)
 8001700:	f7ff fa23 	bl	8000b4a <HTFT_voidDisplay>
    MSTK_voidDelayms(1000);
 8001704:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001708:	f7ff fe9a 	bl	8001440 <MSTK_voidDelayms>

    // ---------------- Main Loop ----------------
    while (1)
    {
        // 1. Read raw ADC value from channel 2 (LM35)
        u16 adc_raw = MADC1_u16ReadChannel(2);
 800170c:	2002      	movs	r0, #2
 800170e:	f7ff fa8f 	bl	8000c30 <MADC1_u16ReadChannel>
 8001712:	4603      	mov	r3, r0
 8001714:	83fb      	strh	r3, [r7, #30]

        // 2. Convert to Celsius
        u32 temperature = Convert_ADCValue_To_Temperature(adc_raw);
 8001716:	8bfb      	ldrh	r3, [r7, #30]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff49 	bl	80015b0 <Convert_ADCValue_To_Temperature>
 800171e:	61b8      	str	r0, [r7, #24]


        // 3. Decide based on temperature range
        if (temperature <= 30)
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	2b1e      	cmp	r3, #30
 8001724:	d815      	bhi.n	8001752 <main+0x12e>
        {
            // Display "Cold" image
            HTFT_voidDisplay(Image_Cold);
 8001726:	482c      	ldr	r0, [pc, #176]	@ (80017d8 <main+0x1b4>)
 8001728:	f7ff fa0f 	bl	8000b4a <HTFT_voidDisplay>

            // Turn ON LED1, OFF others
            MGPIO_void_WritePinValue(PORTA, PIN3, HIGH);
 800172c:	2201      	movs	r2, #1
 800172e:	2103      	movs	r1, #3
 8001730:	2000      	movs	r0, #0
 8001732:	f7ff fbd3 	bl	8000edc <MGPIO_void_WritePinValue>
            MGPIO_void_WritePinValue(PORTA, PIN4, LOW);
 8001736:	2200      	movs	r2, #0
 8001738:	2104      	movs	r1, #4
 800173a:	2000      	movs	r0, #0
 800173c:	f7ff fbce 	bl	8000edc <MGPIO_void_WritePinValue>
            MGPIO_void_WritePinValue(PORTA, PIN6, LOW);
 8001740:	2200      	movs	r2, #0
 8001742:	2106      	movs	r1, #6
 8001744:	2000      	movs	r0, #0
 8001746:	f7ff fbc9 	bl	8000edc <MGPIO_void_WritePinValue>

            // Send text over USART
            MUSART1_voidSendString((u8*)"Cold\r\n");
 800174a:	4824      	ldr	r0, [pc, #144]	@ (80017dc <main+0x1b8>)
 800174c:	f7ff ff14 	bl	8001578 <MUSART1_voidSendString>
 8001750:	e030      	b.n	80017b4 <main+0x190>
        }
        else if (temperature > 30 && temperature <= 50)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	2b1e      	cmp	r3, #30
 8001756:	d918      	bls.n	800178a <main+0x166>
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	2b32      	cmp	r3, #50	@ 0x32
 800175c:	d815      	bhi.n	800178a <main+0x166>
        {
            // Display "Warm" image
            HTFT_voidDisplay(Image_Warm);
 800175e:	4820      	ldr	r0, [pc, #128]	@ (80017e0 <main+0x1bc>)
 8001760:	f7ff f9f3 	bl	8000b4a <HTFT_voidDisplay>

            // Turn ON LED2, OFF others
            MGPIO_void_WritePinValue(PORTA, PIN3, LOW);
 8001764:	2200      	movs	r2, #0
 8001766:	2103      	movs	r1, #3
 8001768:	2000      	movs	r0, #0
 800176a:	f7ff fbb7 	bl	8000edc <MGPIO_void_WritePinValue>
            MGPIO_void_WritePinValue(PORTA, PIN4, HIGH);
 800176e:	2201      	movs	r2, #1
 8001770:	2104      	movs	r1, #4
 8001772:	2000      	movs	r0, #0
 8001774:	f7ff fbb2 	bl	8000edc <MGPIO_void_WritePinValue>
            MGPIO_void_WritePinValue(PORTA, PIN6, LOW);
 8001778:	2200      	movs	r2, #0
 800177a:	2106      	movs	r1, #6
 800177c:	2000      	movs	r0, #0
 800177e:	f7ff fbad 	bl	8000edc <MGPIO_void_WritePinValue>

            // Send text over USART
            MUSART1_voidSendString((u8*)"Warm\r\n");
 8001782:	4818      	ldr	r0, [pc, #96]	@ (80017e4 <main+0x1c0>)
 8001784:	f7ff fef8 	bl	8001578 <MUSART1_voidSendString>
 8001788:	e014      	b.n	80017b4 <main+0x190>
        }
        else
        {
            // Display "Hot" image
            HTFT_voidDisplay(Image_Hot);
 800178a:	4817      	ldr	r0, [pc, #92]	@ (80017e8 <main+0x1c4>)
 800178c:	f7ff f9dd 	bl	8000b4a <HTFT_voidDisplay>

            // Turn ON LED3, OFF others
            MGPIO_void_WritePinValue(PORTA, PIN3, LOW);
 8001790:	2200      	movs	r2, #0
 8001792:	2103      	movs	r1, #3
 8001794:	2000      	movs	r0, #0
 8001796:	f7ff fba1 	bl	8000edc <MGPIO_void_WritePinValue>
            MGPIO_void_WritePinValue(PORTA, PIN4, LOW);
 800179a:	2200      	movs	r2, #0
 800179c:	2104      	movs	r1, #4
 800179e:	2000      	movs	r0, #0
 80017a0:	f7ff fb9c 	bl	8000edc <MGPIO_void_WritePinValue>
            MGPIO_void_WritePinValue(PORTA, PIN6, HIGH);
 80017a4:	2201      	movs	r2, #1
 80017a6:	2106      	movs	r1, #6
 80017a8:	2000      	movs	r0, #0
 80017aa:	f7ff fb97 	bl	8000edc <MGPIO_void_WritePinValue>

            // Send text over USART
            MUSART1_voidSendString((u8*)"Hot\r\n");
 80017ae:	480f      	ldr	r0, [pc, #60]	@ (80017ec <main+0x1c8>)
 80017b0:	f7ff fee2 	bl	8001578 <MUSART1_voidSendString>
        }

        // 4. Send numeric value too
        u8 buffer[20];
        sprintf(buffer, "Temp=%d\r\n", temperature);
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	490d      	ldr	r1, [pc, #52]	@ (80017f0 <main+0x1cc>)
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f87a 	bl	80018b4 <siprintf>
        MUSART1_voidSendString((u8*)buffer);
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fed8 	bl	8001578 <MUSART1_voidSendString>

        // 5. Delay before next reading
        MSTK_voidDelayms(1000);
 80017c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017cc:	f7ff fe38 	bl	8001440 <MSTK_voidDelayms>
    {
 80017d0:	e79c      	b.n	800170c <main+0xe8>
 80017d2:	bf00      	nop
 80017d4:	20000000 	.word	0x20000000
 80017d8:	08002220 	.word	0x08002220
 80017dc:	080021fc 	.word	0x080021fc
 80017e0:	08016220 	.word	0x08016220
 80017e4:	08002204 	.word	0x08002204
 80017e8:	0800c220 	.word	0x0800c220
 80017ec:	0800220c 	.word	0x0800220c
 80017f0:	08002214 	.word	0x08002214

080017f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017fc:	4a14      	ldr	r2, [pc, #80]	@ (8001850 <_sbrk+0x5c>)
 80017fe:	4b15      	ldr	r3, [pc, #84]	@ (8001854 <_sbrk+0x60>)
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001808:	4b13      	ldr	r3, [pc, #76]	@ (8001858 <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d102      	bne.n	8001816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001810:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <_sbrk+0x64>)
 8001812:	4a12      	ldr	r2, [pc, #72]	@ (800185c <_sbrk+0x68>)
 8001814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001816:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <_sbrk+0x64>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	429a      	cmp	r2, r3
 8001822:	d207      	bcs.n	8001834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001824:	f000 f868 	bl	80018f8 <__errno>
 8001828:	4603      	mov	r3, r0
 800182a:	220c      	movs	r2, #12
 800182c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
 8001832:	e009      	b.n	8001848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001834:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800183a:	4b07      	ldr	r3, [pc, #28]	@ (8001858 <_sbrk+0x64>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	4a05      	ldr	r2, [pc, #20]	@ (8001858 <_sbrk+0x64>)
 8001844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001846:	68fb      	ldr	r3, [r7, #12]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20010000 	.word	0x20010000
 8001854:	00000400 	.word	0x00000400
 8001858:	2000a074 	.word	0x2000a074
 800185c:	2000a1c0 	.word	0x2000a1c0

08001860 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001860:	480d      	ldr	r0, [pc, #52]	@ (8001898 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001862:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001864:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001868:	480c      	ldr	r0, [pc, #48]	@ (800189c <LoopForever+0x6>)
  ldr r1, =_edata
 800186a:	490d      	ldr	r1, [pc, #52]	@ (80018a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800186c:	4a0d      	ldr	r2, [pc, #52]	@ (80018a4 <LoopForever+0xe>)
  movs r3, #0
 800186e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001870:	e002      	b.n	8001878 <LoopCopyDataInit>

08001872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001876:	3304      	adds	r3, #4

08001878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800187a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800187c:	d3f9      	bcc.n	8001872 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800187e:	4a0a      	ldr	r2, [pc, #40]	@ (80018a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001880:	4c0a      	ldr	r4, [pc, #40]	@ (80018ac <LoopForever+0x16>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001884:	e001      	b.n	800188a <LoopFillZerobss>

08001886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001888:	3204      	adds	r2, #4

0800188a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800188a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800188c:	d3fb      	bcc.n	8001886 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800188e:	f000 f839 	bl	8001904 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8001892:	f7ff fec7 	bl	8001624 <main>

08001896 <LoopForever>:

LoopForever:
  b LoopForever
 8001896:	e7fe      	b.n	8001896 <LoopForever>
  ldr   r0, =_estack
 8001898:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800189c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a0:	2000a050 	.word	0x2000a050
  ldr r2, =_sidata
 80018a4:	08020264 	.word	0x08020264
  ldr r2, =_sbss
 80018a8:	2000a050 	.word	0x2000a050
  ldr r4, =_ebss
 80018ac:	2000a1c0 	.word	0x2000a1c0

080018b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018b0:	e7fe      	b.n	80018b0 <ADC_IRQHandler>
	...

080018b4 <siprintf>:
 80018b4:	b40e      	push	{r1, r2, r3}
 80018b6:	b510      	push	{r4, lr}
 80018b8:	b09d      	sub	sp, #116	@ 0x74
 80018ba:	ab1f      	add	r3, sp, #124	@ 0x7c
 80018bc:	9002      	str	r0, [sp, #8]
 80018be:	9006      	str	r0, [sp, #24]
 80018c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80018c4:	480a      	ldr	r0, [pc, #40]	@ (80018f0 <siprintf+0x3c>)
 80018c6:	9107      	str	r1, [sp, #28]
 80018c8:	9104      	str	r1, [sp, #16]
 80018ca:	490a      	ldr	r1, [pc, #40]	@ (80018f4 <siprintf+0x40>)
 80018cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80018d0:	9105      	str	r1, [sp, #20]
 80018d2:	2400      	movs	r4, #0
 80018d4:	a902      	add	r1, sp, #8
 80018d6:	6800      	ldr	r0, [r0, #0]
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	941b      	str	r4, [sp, #108]	@ 0x6c
 80018dc:	f000 f98c 	bl	8001bf8 <_svfiprintf_r>
 80018e0:	9b02      	ldr	r3, [sp, #8]
 80018e2:	701c      	strb	r4, [r3, #0]
 80018e4:	b01d      	add	sp, #116	@ 0x74
 80018e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018ea:	b003      	add	sp, #12
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	2000a000 	.word	0x2000a000
 80018f4:	ffff0208 	.word	0xffff0208

080018f8 <__errno>:
 80018f8:	4b01      	ldr	r3, [pc, #4]	@ (8001900 <__errno+0x8>)
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	2000a000 	.word	0x2000a000

08001904 <__libc_init_array>:
 8001904:	b570      	push	{r4, r5, r6, lr}
 8001906:	4d0d      	ldr	r5, [pc, #52]	@ (800193c <__libc_init_array+0x38>)
 8001908:	4c0d      	ldr	r4, [pc, #52]	@ (8001940 <__libc_init_array+0x3c>)
 800190a:	1b64      	subs	r4, r4, r5
 800190c:	10a4      	asrs	r4, r4, #2
 800190e:	2600      	movs	r6, #0
 8001910:	42a6      	cmp	r6, r4
 8001912:	d109      	bne.n	8001928 <__libc_init_array+0x24>
 8001914:	4d0b      	ldr	r5, [pc, #44]	@ (8001944 <__libc_init_array+0x40>)
 8001916:	4c0c      	ldr	r4, [pc, #48]	@ (8001948 <__libc_init_array+0x44>)
 8001918:	f000 fc64 	bl	80021e4 <_init>
 800191c:	1b64      	subs	r4, r4, r5
 800191e:	10a4      	asrs	r4, r4, #2
 8001920:	2600      	movs	r6, #0
 8001922:	42a6      	cmp	r6, r4
 8001924:	d105      	bne.n	8001932 <__libc_init_array+0x2e>
 8001926:	bd70      	pop	{r4, r5, r6, pc}
 8001928:	f855 3b04 	ldr.w	r3, [r5], #4
 800192c:	4798      	blx	r3
 800192e:	3601      	adds	r6, #1
 8001930:	e7ee      	b.n	8001910 <__libc_init_array+0xc>
 8001932:	f855 3b04 	ldr.w	r3, [r5], #4
 8001936:	4798      	blx	r3
 8001938:	3601      	adds	r6, #1
 800193a:	e7f2      	b.n	8001922 <__libc_init_array+0x1e>
 800193c:	0802025c 	.word	0x0802025c
 8001940:	0802025c 	.word	0x0802025c
 8001944:	0802025c 	.word	0x0802025c
 8001948:	08020260 	.word	0x08020260

0800194c <__retarget_lock_acquire_recursive>:
 800194c:	4770      	bx	lr

0800194e <__retarget_lock_release_recursive>:
 800194e:	4770      	bx	lr

08001950 <_free_r>:
 8001950:	b538      	push	{r3, r4, r5, lr}
 8001952:	4605      	mov	r5, r0
 8001954:	2900      	cmp	r1, #0
 8001956:	d041      	beq.n	80019dc <_free_r+0x8c>
 8001958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800195c:	1f0c      	subs	r4, r1, #4
 800195e:	2b00      	cmp	r3, #0
 8001960:	bfb8      	it	lt
 8001962:	18e4      	addlt	r4, r4, r3
 8001964:	f000 f8e0 	bl	8001b28 <__malloc_lock>
 8001968:	4a1d      	ldr	r2, [pc, #116]	@ (80019e0 <_free_r+0x90>)
 800196a:	6813      	ldr	r3, [r2, #0]
 800196c:	b933      	cbnz	r3, 800197c <_free_r+0x2c>
 800196e:	6063      	str	r3, [r4, #4]
 8001970:	6014      	str	r4, [r2, #0]
 8001972:	4628      	mov	r0, r5
 8001974:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001978:	f000 b8dc 	b.w	8001b34 <__malloc_unlock>
 800197c:	42a3      	cmp	r3, r4
 800197e:	d908      	bls.n	8001992 <_free_r+0x42>
 8001980:	6820      	ldr	r0, [r4, #0]
 8001982:	1821      	adds	r1, r4, r0
 8001984:	428b      	cmp	r3, r1
 8001986:	bf01      	itttt	eq
 8001988:	6819      	ldreq	r1, [r3, #0]
 800198a:	685b      	ldreq	r3, [r3, #4]
 800198c:	1809      	addeq	r1, r1, r0
 800198e:	6021      	streq	r1, [r4, #0]
 8001990:	e7ed      	b.n	800196e <_free_r+0x1e>
 8001992:	461a      	mov	r2, r3
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	b10b      	cbz	r3, 800199c <_free_r+0x4c>
 8001998:	42a3      	cmp	r3, r4
 800199a:	d9fa      	bls.n	8001992 <_free_r+0x42>
 800199c:	6811      	ldr	r1, [r2, #0]
 800199e:	1850      	adds	r0, r2, r1
 80019a0:	42a0      	cmp	r0, r4
 80019a2:	d10b      	bne.n	80019bc <_free_r+0x6c>
 80019a4:	6820      	ldr	r0, [r4, #0]
 80019a6:	4401      	add	r1, r0
 80019a8:	1850      	adds	r0, r2, r1
 80019aa:	4283      	cmp	r3, r0
 80019ac:	6011      	str	r1, [r2, #0]
 80019ae:	d1e0      	bne.n	8001972 <_free_r+0x22>
 80019b0:	6818      	ldr	r0, [r3, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	6053      	str	r3, [r2, #4]
 80019b6:	4408      	add	r0, r1
 80019b8:	6010      	str	r0, [r2, #0]
 80019ba:	e7da      	b.n	8001972 <_free_r+0x22>
 80019bc:	d902      	bls.n	80019c4 <_free_r+0x74>
 80019be:	230c      	movs	r3, #12
 80019c0:	602b      	str	r3, [r5, #0]
 80019c2:	e7d6      	b.n	8001972 <_free_r+0x22>
 80019c4:	6820      	ldr	r0, [r4, #0]
 80019c6:	1821      	adds	r1, r4, r0
 80019c8:	428b      	cmp	r3, r1
 80019ca:	bf04      	itt	eq
 80019cc:	6819      	ldreq	r1, [r3, #0]
 80019ce:	685b      	ldreq	r3, [r3, #4]
 80019d0:	6063      	str	r3, [r4, #4]
 80019d2:	bf04      	itt	eq
 80019d4:	1809      	addeq	r1, r1, r0
 80019d6:	6021      	streq	r1, [r4, #0]
 80019d8:	6054      	str	r4, [r2, #4]
 80019da:	e7ca      	b.n	8001972 <_free_r+0x22>
 80019dc:	bd38      	pop	{r3, r4, r5, pc}
 80019de:	bf00      	nop
 80019e0:	2000a1bc 	.word	0x2000a1bc

080019e4 <sbrk_aligned>:
 80019e4:	b570      	push	{r4, r5, r6, lr}
 80019e6:	4e0f      	ldr	r6, [pc, #60]	@ (8001a24 <sbrk_aligned+0x40>)
 80019e8:	460c      	mov	r4, r1
 80019ea:	6831      	ldr	r1, [r6, #0]
 80019ec:	4605      	mov	r5, r0
 80019ee:	b911      	cbnz	r1, 80019f6 <sbrk_aligned+0x12>
 80019f0:	f000 fba4 	bl	800213c <_sbrk_r>
 80019f4:	6030      	str	r0, [r6, #0]
 80019f6:	4621      	mov	r1, r4
 80019f8:	4628      	mov	r0, r5
 80019fa:	f000 fb9f 	bl	800213c <_sbrk_r>
 80019fe:	1c43      	adds	r3, r0, #1
 8001a00:	d103      	bne.n	8001a0a <sbrk_aligned+0x26>
 8001a02:	f04f 34ff 	mov.w	r4, #4294967295
 8001a06:	4620      	mov	r0, r4
 8001a08:	bd70      	pop	{r4, r5, r6, pc}
 8001a0a:	1cc4      	adds	r4, r0, #3
 8001a0c:	f024 0403 	bic.w	r4, r4, #3
 8001a10:	42a0      	cmp	r0, r4
 8001a12:	d0f8      	beq.n	8001a06 <sbrk_aligned+0x22>
 8001a14:	1a21      	subs	r1, r4, r0
 8001a16:	4628      	mov	r0, r5
 8001a18:	f000 fb90 	bl	800213c <_sbrk_r>
 8001a1c:	3001      	adds	r0, #1
 8001a1e:	d1f2      	bne.n	8001a06 <sbrk_aligned+0x22>
 8001a20:	e7ef      	b.n	8001a02 <sbrk_aligned+0x1e>
 8001a22:	bf00      	nop
 8001a24:	2000a1b8 	.word	0x2000a1b8

08001a28 <_malloc_r>:
 8001a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a2c:	1ccd      	adds	r5, r1, #3
 8001a2e:	f025 0503 	bic.w	r5, r5, #3
 8001a32:	3508      	adds	r5, #8
 8001a34:	2d0c      	cmp	r5, #12
 8001a36:	bf38      	it	cc
 8001a38:	250c      	movcc	r5, #12
 8001a3a:	2d00      	cmp	r5, #0
 8001a3c:	4606      	mov	r6, r0
 8001a3e:	db01      	blt.n	8001a44 <_malloc_r+0x1c>
 8001a40:	42a9      	cmp	r1, r5
 8001a42:	d904      	bls.n	8001a4e <_malloc_r+0x26>
 8001a44:	230c      	movs	r3, #12
 8001a46:	6033      	str	r3, [r6, #0]
 8001a48:	2000      	movs	r0, #0
 8001a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001b24 <_malloc_r+0xfc>
 8001a52:	f000 f869 	bl	8001b28 <__malloc_lock>
 8001a56:	f8d8 3000 	ldr.w	r3, [r8]
 8001a5a:	461c      	mov	r4, r3
 8001a5c:	bb44      	cbnz	r4, 8001ab0 <_malloc_r+0x88>
 8001a5e:	4629      	mov	r1, r5
 8001a60:	4630      	mov	r0, r6
 8001a62:	f7ff ffbf 	bl	80019e4 <sbrk_aligned>
 8001a66:	1c43      	adds	r3, r0, #1
 8001a68:	4604      	mov	r4, r0
 8001a6a:	d158      	bne.n	8001b1e <_malloc_r+0xf6>
 8001a6c:	f8d8 4000 	ldr.w	r4, [r8]
 8001a70:	4627      	mov	r7, r4
 8001a72:	2f00      	cmp	r7, #0
 8001a74:	d143      	bne.n	8001afe <_malloc_r+0xd6>
 8001a76:	2c00      	cmp	r4, #0
 8001a78:	d04b      	beq.n	8001b12 <_malloc_r+0xea>
 8001a7a:	6823      	ldr	r3, [r4, #0]
 8001a7c:	4639      	mov	r1, r7
 8001a7e:	4630      	mov	r0, r6
 8001a80:	eb04 0903 	add.w	r9, r4, r3
 8001a84:	f000 fb5a 	bl	800213c <_sbrk_r>
 8001a88:	4581      	cmp	r9, r0
 8001a8a:	d142      	bne.n	8001b12 <_malloc_r+0xea>
 8001a8c:	6821      	ldr	r1, [r4, #0]
 8001a8e:	1a6d      	subs	r5, r5, r1
 8001a90:	4629      	mov	r1, r5
 8001a92:	4630      	mov	r0, r6
 8001a94:	f7ff ffa6 	bl	80019e4 <sbrk_aligned>
 8001a98:	3001      	adds	r0, #1
 8001a9a:	d03a      	beq.n	8001b12 <_malloc_r+0xea>
 8001a9c:	6823      	ldr	r3, [r4, #0]
 8001a9e:	442b      	add	r3, r5
 8001aa0:	6023      	str	r3, [r4, #0]
 8001aa2:	f8d8 3000 	ldr.w	r3, [r8]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	bb62      	cbnz	r2, 8001b04 <_malloc_r+0xdc>
 8001aaa:	f8c8 7000 	str.w	r7, [r8]
 8001aae:	e00f      	b.n	8001ad0 <_malloc_r+0xa8>
 8001ab0:	6822      	ldr	r2, [r4, #0]
 8001ab2:	1b52      	subs	r2, r2, r5
 8001ab4:	d420      	bmi.n	8001af8 <_malloc_r+0xd0>
 8001ab6:	2a0b      	cmp	r2, #11
 8001ab8:	d917      	bls.n	8001aea <_malloc_r+0xc2>
 8001aba:	1961      	adds	r1, r4, r5
 8001abc:	42a3      	cmp	r3, r4
 8001abe:	6025      	str	r5, [r4, #0]
 8001ac0:	bf18      	it	ne
 8001ac2:	6059      	strne	r1, [r3, #4]
 8001ac4:	6863      	ldr	r3, [r4, #4]
 8001ac6:	bf08      	it	eq
 8001ac8:	f8c8 1000 	streq.w	r1, [r8]
 8001acc:	5162      	str	r2, [r4, r5]
 8001ace:	604b      	str	r3, [r1, #4]
 8001ad0:	4630      	mov	r0, r6
 8001ad2:	f000 f82f 	bl	8001b34 <__malloc_unlock>
 8001ad6:	f104 000b 	add.w	r0, r4, #11
 8001ada:	1d23      	adds	r3, r4, #4
 8001adc:	f020 0007 	bic.w	r0, r0, #7
 8001ae0:	1ac2      	subs	r2, r0, r3
 8001ae2:	bf1c      	itt	ne
 8001ae4:	1a1b      	subne	r3, r3, r0
 8001ae6:	50a3      	strne	r3, [r4, r2]
 8001ae8:	e7af      	b.n	8001a4a <_malloc_r+0x22>
 8001aea:	6862      	ldr	r2, [r4, #4]
 8001aec:	42a3      	cmp	r3, r4
 8001aee:	bf0c      	ite	eq
 8001af0:	f8c8 2000 	streq.w	r2, [r8]
 8001af4:	605a      	strne	r2, [r3, #4]
 8001af6:	e7eb      	b.n	8001ad0 <_malloc_r+0xa8>
 8001af8:	4623      	mov	r3, r4
 8001afa:	6864      	ldr	r4, [r4, #4]
 8001afc:	e7ae      	b.n	8001a5c <_malloc_r+0x34>
 8001afe:	463c      	mov	r4, r7
 8001b00:	687f      	ldr	r7, [r7, #4]
 8001b02:	e7b6      	b.n	8001a72 <_malloc_r+0x4a>
 8001b04:	461a      	mov	r2, r3
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	42a3      	cmp	r3, r4
 8001b0a:	d1fb      	bne.n	8001b04 <_malloc_r+0xdc>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	6053      	str	r3, [r2, #4]
 8001b10:	e7de      	b.n	8001ad0 <_malloc_r+0xa8>
 8001b12:	230c      	movs	r3, #12
 8001b14:	6033      	str	r3, [r6, #0]
 8001b16:	4630      	mov	r0, r6
 8001b18:	f000 f80c 	bl	8001b34 <__malloc_unlock>
 8001b1c:	e794      	b.n	8001a48 <_malloc_r+0x20>
 8001b1e:	6005      	str	r5, [r0, #0]
 8001b20:	e7d6      	b.n	8001ad0 <_malloc_r+0xa8>
 8001b22:	bf00      	nop
 8001b24:	2000a1bc 	.word	0x2000a1bc

08001b28 <__malloc_lock>:
 8001b28:	4801      	ldr	r0, [pc, #4]	@ (8001b30 <__malloc_lock+0x8>)
 8001b2a:	f7ff bf0f 	b.w	800194c <__retarget_lock_acquire_recursive>
 8001b2e:	bf00      	nop
 8001b30:	2000a1b4 	.word	0x2000a1b4

08001b34 <__malloc_unlock>:
 8001b34:	4801      	ldr	r0, [pc, #4]	@ (8001b3c <__malloc_unlock+0x8>)
 8001b36:	f7ff bf0a 	b.w	800194e <__retarget_lock_release_recursive>
 8001b3a:	bf00      	nop
 8001b3c:	2000a1b4 	.word	0x2000a1b4

08001b40 <__ssputs_r>:
 8001b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b44:	688e      	ldr	r6, [r1, #8]
 8001b46:	461f      	mov	r7, r3
 8001b48:	42be      	cmp	r6, r7
 8001b4a:	680b      	ldr	r3, [r1, #0]
 8001b4c:	4682      	mov	sl, r0
 8001b4e:	460c      	mov	r4, r1
 8001b50:	4690      	mov	r8, r2
 8001b52:	d82d      	bhi.n	8001bb0 <__ssputs_r+0x70>
 8001b54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001b58:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001b5c:	d026      	beq.n	8001bac <__ssputs_r+0x6c>
 8001b5e:	6965      	ldr	r5, [r4, #20]
 8001b60:	6909      	ldr	r1, [r1, #16]
 8001b62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001b66:	eba3 0901 	sub.w	r9, r3, r1
 8001b6a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001b6e:	1c7b      	adds	r3, r7, #1
 8001b70:	444b      	add	r3, r9
 8001b72:	106d      	asrs	r5, r5, #1
 8001b74:	429d      	cmp	r5, r3
 8001b76:	bf38      	it	cc
 8001b78:	461d      	movcc	r5, r3
 8001b7a:	0553      	lsls	r3, r2, #21
 8001b7c:	d527      	bpl.n	8001bce <__ssputs_r+0x8e>
 8001b7e:	4629      	mov	r1, r5
 8001b80:	f7ff ff52 	bl	8001a28 <_malloc_r>
 8001b84:	4606      	mov	r6, r0
 8001b86:	b360      	cbz	r0, 8001be2 <__ssputs_r+0xa2>
 8001b88:	6921      	ldr	r1, [r4, #16]
 8001b8a:	464a      	mov	r2, r9
 8001b8c:	f000 fae6 	bl	800215c <memcpy>
 8001b90:	89a3      	ldrh	r3, [r4, #12]
 8001b92:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001b96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b9a:	81a3      	strh	r3, [r4, #12]
 8001b9c:	6126      	str	r6, [r4, #16]
 8001b9e:	6165      	str	r5, [r4, #20]
 8001ba0:	444e      	add	r6, r9
 8001ba2:	eba5 0509 	sub.w	r5, r5, r9
 8001ba6:	6026      	str	r6, [r4, #0]
 8001ba8:	60a5      	str	r5, [r4, #8]
 8001baa:	463e      	mov	r6, r7
 8001bac:	42be      	cmp	r6, r7
 8001bae:	d900      	bls.n	8001bb2 <__ssputs_r+0x72>
 8001bb0:	463e      	mov	r6, r7
 8001bb2:	6820      	ldr	r0, [r4, #0]
 8001bb4:	4632      	mov	r2, r6
 8001bb6:	4641      	mov	r1, r8
 8001bb8:	f000 faa6 	bl	8002108 <memmove>
 8001bbc:	68a3      	ldr	r3, [r4, #8]
 8001bbe:	1b9b      	subs	r3, r3, r6
 8001bc0:	60a3      	str	r3, [r4, #8]
 8001bc2:	6823      	ldr	r3, [r4, #0]
 8001bc4:	4433      	add	r3, r6
 8001bc6:	6023      	str	r3, [r4, #0]
 8001bc8:	2000      	movs	r0, #0
 8001bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bce:	462a      	mov	r2, r5
 8001bd0:	f000 fad2 	bl	8002178 <_realloc_r>
 8001bd4:	4606      	mov	r6, r0
 8001bd6:	2800      	cmp	r0, #0
 8001bd8:	d1e0      	bne.n	8001b9c <__ssputs_r+0x5c>
 8001bda:	6921      	ldr	r1, [r4, #16]
 8001bdc:	4650      	mov	r0, sl
 8001bde:	f7ff feb7 	bl	8001950 <_free_r>
 8001be2:	230c      	movs	r3, #12
 8001be4:	f8ca 3000 	str.w	r3, [sl]
 8001be8:	89a3      	ldrh	r3, [r4, #12]
 8001bea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bee:	81a3      	strh	r3, [r4, #12]
 8001bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf4:	e7e9      	b.n	8001bca <__ssputs_r+0x8a>
	...

08001bf8 <_svfiprintf_r>:
 8001bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bfc:	4698      	mov	r8, r3
 8001bfe:	898b      	ldrh	r3, [r1, #12]
 8001c00:	061b      	lsls	r3, r3, #24
 8001c02:	b09d      	sub	sp, #116	@ 0x74
 8001c04:	4607      	mov	r7, r0
 8001c06:	460d      	mov	r5, r1
 8001c08:	4614      	mov	r4, r2
 8001c0a:	d510      	bpl.n	8001c2e <_svfiprintf_r+0x36>
 8001c0c:	690b      	ldr	r3, [r1, #16]
 8001c0e:	b973      	cbnz	r3, 8001c2e <_svfiprintf_r+0x36>
 8001c10:	2140      	movs	r1, #64	@ 0x40
 8001c12:	f7ff ff09 	bl	8001a28 <_malloc_r>
 8001c16:	6028      	str	r0, [r5, #0]
 8001c18:	6128      	str	r0, [r5, #16]
 8001c1a:	b930      	cbnz	r0, 8001c2a <_svfiprintf_r+0x32>
 8001c1c:	230c      	movs	r3, #12
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295
 8001c24:	b01d      	add	sp, #116	@ 0x74
 8001c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c2a:	2340      	movs	r3, #64	@ 0x40
 8001c2c:	616b      	str	r3, [r5, #20]
 8001c2e:	2300      	movs	r3, #0
 8001c30:	9309      	str	r3, [sp, #36]	@ 0x24
 8001c32:	2320      	movs	r3, #32
 8001c34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001c38:	f8cd 800c 	str.w	r8, [sp, #12]
 8001c3c:	2330      	movs	r3, #48	@ 0x30
 8001c3e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001ddc <_svfiprintf_r+0x1e4>
 8001c42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001c46:	f04f 0901 	mov.w	r9, #1
 8001c4a:	4623      	mov	r3, r4
 8001c4c:	469a      	mov	sl, r3
 8001c4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001c52:	b10a      	cbz	r2, 8001c58 <_svfiprintf_r+0x60>
 8001c54:	2a25      	cmp	r2, #37	@ 0x25
 8001c56:	d1f9      	bne.n	8001c4c <_svfiprintf_r+0x54>
 8001c58:	ebba 0b04 	subs.w	fp, sl, r4
 8001c5c:	d00b      	beq.n	8001c76 <_svfiprintf_r+0x7e>
 8001c5e:	465b      	mov	r3, fp
 8001c60:	4622      	mov	r2, r4
 8001c62:	4629      	mov	r1, r5
 8001c64:	4638      	mov	r0, r7
 8001c66:	f7ff ff6b 	bl	8001b40 <__ssputs_r>
 8001c6a:	3001      	adds	r0, #1
 8001c6c:	f000 80a7 	beq.w	8001dbe <_svfiprintf_r+0x1c6>
 8001c70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001c72:	445a      	add	r2, fp
 8001c74:	9209      	str	r2, [sp, #36]	@ 0x24
 8001c76:	f89a 3000 	ldrb.w	r3, [sl]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 809f 	beq.w	8001dbe <_svfiprintf_r+0x1c6>
 8001c80:	2300      	movs	r3, #0
 8001c82:	f04f 32ff 	mov.w	r2, #4294967295
 8001c86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001c8a:	f10a 0a01 	add.w	sl, sl, #1
 8001c8e:	9304      	str	r3, [sp, #16]
 8001c90:	9307      	str	r3, [sp, #28]
 8001c92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001c96:	931a      	str	r3, [sp, #104]	@ 0x68
 8001c98:	4654      	mov	r4, sl
 8001c9a:	2205      	movs	r2, #5
 8001c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ca0:	484e      	ldr	r0, [pc, #312]	@ (8001ddc <_svfiprintf_r+0x1e4>)
 8001ca2:	f7fe fa9d 	bl	80001e0 <memchr>
 8001ca6:	9a04      	ldr	r2, [sp, #16]
 8001ca8:	b9d8      	cbnz	r0, 8001ce2 <_svfiprintf_r+0xea>
 8001caa:	06d0      	lsls	r0, r2, #27
 8001cac:	bf44      	itt	mi
 8001cae:	2320      	movmi	r3, #32
 8001cb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001cb4:	0711      	lsls	r1, r2, #28
 8001cb6:	bf44      	itt	mi
 8001cb8:	232b      	movmi	r3, #43	@ 0x2b
 8001cba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001cbe:	f89a 3000 	ldrb.w	r3, [sl]
 8001cc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8001cc4:	d015      	beq.n	8001cf2 <_svfiprintf_r+0xfa>
 8001cc6:	9a07      	ldr	r2, [sp, #28]
 8001cc8:	4654      	mov	r4, sl
 8001cca:	2000      	movs	r0, #0
 8001ccc:	f04f 0c0a 	mov.w	ip, #10
 8001cd0:	4621      	mov	r1, r4
 8001cd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001cd6:	3b30      	subs	r3, #48	@ 0x30
 8001cd8:	2b09      	cmp	r3, #9
 8001cda:	d94b      	bls.n	8001d74 <_svfiprintf_r+0x17c>
 8001cdc:	b1b0      	cbz	r0, 8001d0c <_svfiprintf_r+0x114>
 8001cde:	9207      	str	r2, [sp, #28]
 8001ce0:	e014      	b.n	8001d0c <_svfiprintf_r+0x114>
 8001ce2:	eba0 0308 	sub.w	r3, r0, r8
 8001ce6:	fa09 f303 	lsl.w	r3, r9, r3
 8001cea:	4313      	orrs	r3, r2
 8001cec:	9304      	str	r3, [sp, #16]
 8001cee:	46a2      	mov	sl, r4
 8001cf0:	e7d2      	b.n	8001c98 <_svfiprintf_r+0xa0>
 8001cf2:	9b03      	ldr	r3, [sp, #12]
 8001cf4:	1d19      	adds	r1, r3, #4
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	9103      	str	r1, [sp, #12]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	bfbb      	ittet	lt
 8001cfe:	425b      	neglt	r3, r3
 8001d00:	f042 0202 	orrlt.w	r2, r2, #2
 8001d04:	9307      	strge	r3, [sp, #28]
 8001d06:	9307      	strlt	r3, [sp, #28]
 8001d08:	bfb8      	it	lt
 8001d0a:	9204      	strlt	r2, [sp, #16]
 8001d0c:	7823      	ldrb	r3, [r4, #0]
 8001d0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001d10:	d10a      	bne.n	8001d28 <_svfiprintf_r+0x130>
 8001d12:	7863      	ldrb	r3, [r4, #1]
 8001d14:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d16:	d132      	bne.n	8001d7e <_svfiprintf_r+0x186>
 8001d18:	9b03      	ldr	r3, [sp, #12]
 8001d1a:	1d1a      	adds	r2, r3, #4
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	9203      	str	r2, [sp, #12]
 8001d20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001d24:	3402      	adds	r4, #2
 8001d26:	9305      	str	r3, [sp, #20]
 8001d28:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001dec <_svfiprintf_r+0x1f4>
 8001d2c:	7821      	ldrb	r1, [r4, #0]
 8001d2e:	2203      	movs	r2, #3
 8001d30:	4650      	mov	r0, sl
 8001d32:	f7fe fa55 	bl	80001e0 <memchr>
 8001d36:	b138      	cbz	r0, 8001d48 <_svfiprintf_r+0x150>
 8001d38:	9b04      	ldr	r3, [sp, #16]
 8001d3a:	eba0 000a 	sub.w	r0, r0, sl
 8001d3e:	2240      	movs	r2, #64	@ 0x40
 8001d40:	4082      	lsls	r2, r0
 8001d42:	4313      	orrs	r3, r2
 8001d44:	3401      	adds	r4, #1
 8001d46:	9304      	str	r3, [sp, #16]
 8001d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d4c:	4824      	ldr	r0, [pc, #144]	@ (8001de0 <_svfiprintf_r+0x1e8>)
 8001d4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001d52:	2206      	movs	r2, #6
 8001d54:	f7fe fa44 	bl	80001e0 <memchr>
 8001d58:	2800      	cmp	r0, #0
 8001d5a:	d036      	beq.n	8001dca <_svfiprintf_r+0x1d2>
 8001d5c:	4b21      	ldr	r3, [pc, #132]	@ (8001de4 <_svfiprintf_r+0x1ec>)
 8001d5e:	bb1b      	cbnz	r3, 8001da8 <_svfiprintf_r+0x1b0>
 8001d60:	9b03      	ldr	r3, [sp, #12]
 8001d62:	3307      	adds	r3, #7
 8001d64:	f023 0307 	bic.w	r3, r3, #7
 8001d68:	3308      	adds	r3, #8
 8001d6a:	9303      	str	r3, [sp, #12]
 8001d6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001d6e:	4433      	add	r3, r6
 8001d70:	9309      	str	r3, [sp, #36]	@ 0x24
 8001d72:	e76a      	b.n	8001c4a <_svfiprintf_r+0x52>
 8001d74:	fb0c 3202 	mla	r2, ip, r2, r3
 8001d78:	460c      	mov	r4, r1
 8001d7a:	2001      	movs	r0, #1
 8001d7c:	e7a8      	b.n	8001cd0 <_svfiprintf_r+0xd8>
 8001d7e:	2300      	movs	r3, #0
 8001d80:	3401      	adds	r4, #1
 8001d82:	9305      	str	r3, [sp, #20]
 8001d84:	4619      	mov	r1, r3
 8001d86:	f04f 0c0a 	mov.w	ip, #10
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d90:	3a30      	subs	r2, #48	@ 0x30
 8001d92:	2a09      	cmp	r2, #9
 8001d94:	d903      	bls.n	8001d9e <_svfiprintf_r+0x1a6>
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0c6      	beq.n	8001d28 <_svfiprintf_r+0x130>
 8001d9a:	9105      	str	r1, [sp, #20]
 8001d9c:	e7c4      	b.n	8001d28 <_svfiprintf_r+0x130>
 8001d9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001da2:	4604      	mov	r4, r0
 8001da4:	2301      	movs	r3, #1
 8001da6:	e7f0      	b.n	8001d8a <_svfiprintf_r+0x192>
 8001da8:	ab03      	add	r3, sp, #12
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	462a      	mov	r2, r5
 8001dae:	4b0e      	ldr	r3, [pc, #56]	@ (8001de8 <_svfiprintf_r+0x1f0>)
 8001db0:	a904      	add	r1, sp, #16
 8001db2:	4638      	mov	r0, r7
 8001db4:	f3af 8000 	nop.w
 8001db8:	1c42      	adds	r2, r0, #1
 8001dba:	4606      	mov	r6, r0
 8001dbc:	d1d6      	bne.n	8001d6c <_svfiprintf_r+0x174>
 8001dbe:	89ab      	ldrh	r3, [r5, #12]
 8001dc0:	065b      	lsls	r3, r3, #25
 8001dc2:	f53f af2d 	bmi.w	8001c20 <_svfiprintf_r+0x28>
 8001dc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001dc8:	e72c      	b.n	8001c24 <_svfiprintf_r+0x2c>
 8001dca:	ab03      	add	r3, sp, #12
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	462a      	mov	r2, r5
 8001dd0:	4b05      	ldr	r3, [pc, #20]	@ (8001de8 <_svfiprintf_r+0x1f0>)
 8001dd2:	a904      	add	r1, sp, #16
 8001dd4:	4638      	mov	r0, r7
 8001dd6:	f000 f879 	bl	8001ecc <_printf_i>
 8001dda:	e7ed      	b.n	8001db8 <_svfiprintf_r+0x1c0>
 8001ddc:	08020220 	.word	0x08020220
 8001de0:	0802022a 	.word	0x0802022a
 8001de4:	00000000 	.word	0x00000000
 8001de8:	08001b41 	.word	0x08001b41
 8001dec:	08020226 	.word	0x08020226

08001df0 <_printf_common>:
 8001df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001df4:	4616      	mov	r6, r2
 8001df6:	4698      	mov	r8, r3
 8001df8:	688a      	ldr	r2, [r1, #8]
 8001dfa:	690b      	ldr	r3, [r1, #16]
 8001dfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001e00:	4293      	cmp	r3, r2
 8001e02:	bfb8      	it	lt
 8001e04:	4613      	movlt	r3, r2
 8001e06:	6033      	str	r3, [r6, #0]
 8001e08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001e0c:	4607      	mov	r7, r0
 8001e0e:	460c      	mov	r4, r1
 8001e10:	b10a      	cbz	r2, 8001e16 <_printf_common+0x26>
 8001e12:	3301      	adds	r3, #1
 8001e14:	6033      	str	r3, [r6, #0]
 8001e16:	6823      	ldr	r3, [r4, #0]
 8001e18:	0699      	lsls	r1, r3, #26
 8001e1a:	bf42      	ittt	mi
 8001e1c:	6833      	ldrmi	r3, [r6, #0]
 8001e1e:	3302      	addmi	r3, #2
 8001e20:	6033      	strmi	r3, [r6, #0]
 8001e22:	6825      	ldr	r5, [r4, #0]
 8001e24:	f015 0506 	ands.w	r5, r5, #6
 8001e28:	d106      	bne.n	8001e38 <_printf_common+0x48>
 8001e2a:	f104 0a19 	add.w	sl, r4, #25
 8001e2e:	68e3      	ldr	r3, [r4, #12]
 8001e30:	6832      	ldr	r2, [r6, #0]
 8001e32:	1a9b      	subs	r3, r3, r2
 8001e34:	42ab      	cmp	r3, r5
 8001e36:	dc26      	bgt.n	8001e86 <_printf_common+0x96>
 8001e38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001e3c:	6822      	ldr	r2, [r4, #0]
 8001e3e:	3b00      	subs	r3, #0
 8001e40:	bf18      	it	ne
 8001e42:	2301      	movne	r3, #1
 8001e44:	0692      	lsls	r2, r2, #26
 8001e46:	d42b      	bmi.n	8001ea0 <_printf_common+0xb0>
 8001e48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001e4c:	4641      	mov	r1, r8
 8001e4e:	4638      	mov	r0, r7
 8001e50:	47c8      	blx	r9
 8001e52:	3001      	adds	r0, #1
 8001e54:	d01e      	beq.n	8001e94 <_printf_common+0xa4>
 8001e56:	6823      	ldr	r3, [r4, #0]
 8001e58:	6922      	ldr	r2, [r4, #16]
 8001e5a:	f003 0306 	and.w	r3, r3, #6
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	bf02      	ittt	eq
 8001e62:	68e5      	ldreq	r5, [r4, #12]
 8001e64:	6833      	ldreq	r3, [r6, #0]
 8001e66:	1aed      	subeq	r5, r5, r3
 8001e68:	68a3      	ldr	r3, [r4, #8]
 8001e6a:	bf0c      	ite	eq
 8001e6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e70:	2500      	movne	r5, #0
 8001e72:	4293      	cmp	r3, r2
 8001e74:	bfc4      	itt	gt
 8001e76:	1a9b      	subgt	r3, r3, r2
 8001e78:	18ed      	addgt	r5, r5, r3
 8001e7a:	2600      	movs	r6, #0
 8001e7c:	341a      	adds	r4, #26
 8001e7e:	42b5      	cmp	r5, r6
 8001e80:	d11a      	bne.n	8001eb8 <_printf_common+0xc8>
 8001e82:	2000      	movs	r0, #0
 8001e84:	e008      	b.n	8001e98 <_printf_common+0xa8>
 8001e86:	2301      	movs	r3, #1
 8001e88:	4652      	mov	r2, sl
 8001e8a:	4641      	mov	r1, r8
 8001e8c:	4638      	mov	r0, r7
 8001e8e:	47c8      	blx	r9
 8001e90:	3001      	adds	r0, #1
 8001e92:	d103      	bne.n	8001e9c <_printf_common+0xac>
 8001e94:	f04f 30ff 	mov.w	r0, #4294967295
 8001e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e9c:	3501      	adds	r5, #1
 8001e9e:	e7c6      	b.n	8001e2e <_printf_common+0x3e>
 8001ea0:	18e1      	adds	r1, r4, r3
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	2030      	movs	r0, #48	@ 0x30
 8001ea6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001eaa:	4422      	add	r2, r4
 8001eac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001eb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	e7c7      	b.n	8001e48 <_printf_common+0x58>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	4622      	mov	r2, r4
 8001ebc:	4641      	mov	r1, r8
 8001ebe:	4638      	mov	r0, r7
 8001ec0:	47c8      	blx	r9
 8001ec2:	3001      	adds	r0, #1
 8001ec4:	d0e6      	beq.n	8001e94 <_printf_common+0xa4>
 8001ec6:	3601      	adds	r6, #1
 8001ec8:	e7d9      	b.n	8001e7e <_printf_common+0x8e>
	...

08001ecc <_printf_i>:
 8001ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ed0:	7e0f      	ldrb	r7, [r1, #24]
 8001ed2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001ed4:	2f78      	cmp	r7, #120	@ 0x78
 8001ed6:	4691      	mov	r9, r2
 8001ed8:	4680      	mov	r8, r0
 8001eda:	460c      	mov	r4, r1
 8001edc:	469a      	mov	sl, r3
 8001ede:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001ee2:	d807      	bhi.n	8001ef4 <_printf_i+0x28>
 8001ee4:	2f62      	cmp	r7, #98	@ 0x62
 8001ee6:	d80a      	bhi.n	8001efe <_printf_i+0x32>
 8001ee8:	2f00      	cmp	r7, #0
 8001eea:	f000 80d1 	beq.w	8002090 <_printf_i+0x1c4>
 8001eee:	2f58      	cmp	r7, #88	@ 0x58
 8001ef0:	f000 80b8 	beq.w	8002064 <_printf_i+0x198>
 8001ef4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001ef8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001efc:	e03a      	b.n	8001f74 <_printf_i+0xa8>
 8001efe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001f02:	2b15      	cmp	r3, #21
 8001f04:	d8f6      	bhi.n	8001ef4 <_printf_i+0x28>
 8001f06:	a101      	add	r1, pc, #4	@ (adr r1, 8001f0c <_printf_i+0x40>)
 8001f08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001f0c:	08001f65 	.word	0x08001f65
 8001f10:	08001f79 	.word	0x08001f79
 8001f14:	08001ef5 	.word	0x08001ef5
 8001f18:	08001ef5 	.word	0x08001ef5
 8001f1c:	08001ef5 	.word	0x08001ef5
 8001f20:	08001ef5 	.word	0x08001ef5
 8001f24:	08001f79 	.word	0x08001f79
 8001f28:	08001ef5 	.word	0x08001ef5
 8001f2c:	08001ef5 	.word	0x08001ef5
 8001f30:	08001ef5 	.word	0x08001ef5
 8001f34:	08001ef5 	.word	0x08001ef5
 8001f38:	08002077 	.word	0x08002077
 8001f3c:	08001fa3 	.word	0x08001fa3
 8001f40:	08002031 	.word	0x08002031
 8001f44:	08001ef5 	.word	0x08001ef5
 8001f48:	08001ef5 	.word	0x08001ef5
 8001f4c:	08002099 	.word	0x08002099
 8001f50:	08001ef5 	.word	0x08001ef5
 8001f54:	08001fa3 	.word	0x08001fa3
 8001f58:	08001ef5 	.word	0x08001ef5
 8001f5c:	08001ef5 	.word	0x08001ef5
 8001f60:	08002039 	.word	0x08002039
 8001f64:	6833      	ldr	r3, [r6, #0]
 8001f66:	1d1a      	adds	r2, r3, #4
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6032      	str	r2, [r6, #0]
 8001f6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001f70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001f74:	2301      	movs	r3, #1
 8001f76:	e09c      	b.n	80020b2 <_printf_i+0x1e6>
 8001f78:	6833      	ldr	r3, [r6, #0]
 8001f7a:	6820      	ldr	r0, [r4, #0]
 8001f7c:	1d19      	adds	r1, r3, #4
 8001f7e:	6031      	str	r1, [r6, #0]
 8001f80:	0606      	lsls	r6, r0, #24
 8001f82:	d501      	bpl.n	8001f88 <_printf_i+0xbc>
 8001f84:	681d      	ldr	r5, [r3, #0]
 8001f86:	e003      	b.n	8001f90 <_printf_i+0xc4>
 8001f88:	0645      	lsls	r5, r0, #25
 8001f8a:	d5fb      	bpl.n	8001f84 <_printf_i+0xb8>
 8001f8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001f90:	2d00      	cmp	r5, #0
 8001f92:	da03      	bge.n	8001f9c <_printf_i+0xd0>
 8001f94:	232d      	movs	r3, #45	@ 0x2d
 8001f96:	426d      	negs	r5, r5
 8001f98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001f9c:	4858      	ldr	r0, [pc, #352]	@ (8002100 <_printf_i+0x234>)
 8001f9e:	230a      	movs	r3, #10
 8001fa0:	e011      	b.n	8001fc6 <_printf_i+0xfa>
 8001fa2:	6821      	ldr	r1, [r4, #0]
 8001fa4:	6833      	ldr	r3, [r6, #0]
 8001fa6:	0608      	lsls	r0, r1, #24
 8001fa8:	f853 5b04 	ldr.w	r5, [r3], #4
 8001fac:	d402      	bmi.n	8001fb4 <_printf_i+0xe8>
 8001fae:	0649      	lsls	r1, r1, #25
 8001fb0:	bf48      	it	mi
 8001fb2:	b2ad      	uxthmi	r5, r5
 8001fb4:	2f6f      	cmp	r7, #111	@ 0x6f
 8001fb6:	4852      	ldr	r0, [pc, #328]	@ (8002100 <_printf_i+0x234>)
 8001fb8:	6033      	str	r3, [r6, #0]
 8001fba:	bf14      	ite	ne
 8001fbc:	230a      	movne	r3, #10
 8001fbe:	2308      	moveq	r3, #8
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001fc6:	6866      	ldr	r6, [r4, #4]
 8001fc8:	60a6      	str	r6, [r4, #8]
 8001fca:	2e00      	cmp	r6, #0
 8001fcc:	db05      	blt.n	8001fda <_printf_i+0x10e>
 8001fce:	6821      	ldr	r1, [r4, #0]
 8001fd0:	432e      	orrs	r6, r5
 8001fd2:	f021 0104 	bic.w	r1, r1, #4
 8001fd6:	6021      	str	r1, [r4, #0]
 8001fd8:	d04b      	beq.n	8002072 <_printf_i+0x1a6>
 8001fda:	4616      	mov	r6, r2
 8001fdc:	fbb5 f1f3 	udiv	r1, r5, r3
 8001fe0:	fb03 5711 	mls	r7, r3, r1, r5
 8001fe4:	5dc7      	ldrb	r7, [r0, r7]
 8001fe6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001fea:	462f      	mov	r7, r5
 8001fec:	42bb      	cmp	r3, r7
 8001fee:	460d      	mov	r5, r1
 8001ff0:	d9f4      	bls.n	8001fdc <_printf_i+0x110>
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d10b      	bne.n	800200e <_printf_i+0x142>
 8001ff6:	6823      	ldr	r3, [r4, #0]
 8001ff8:	07df      	lsls	r7, r3, #31
 8001ffa:	d508      	bpl.n	800200e <_printf_i+0x142>
 8001ffc:	6923      	ldr	r3, [r4, #16]
 8001ffe:	6861      	ldr	r1, [r4, #4]
 8002000:	4299      	cmp	r1, r3
 8002002:	bfde      	ittt	le
 8002004:	2330      	movle	r3, #48	@ 0x30
 8002006:	f806 3c01 	strble.w	r3, [r6, #-1]
 800200a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800200e:	1b92      	subs	r2, r2, r6
 8002010:	6122      	str	r2, [r4, #16]
 8002012:	f8cd a000 	str.w	sl, [sp]
 8002016:	464b      	mov	r3, r9
 8002018:	aa03      	add	r2, sp, #12
 800201a:	4621      	mov	r1, r4
 800201c:	4640      	mov	r0, r8
 800201e:	f7ff fee7 	bl	8001df0 <_printf_common>
 8002022:	3001      	adds	r0, #1
 8002024:	d14a      	bne.n	80020bc <_printf_i+0x1f0>
 8002026:	f04f 30ff 	mov.w	r0, #4294967295
 800202a:	b004      	add	sp, #16
 800202c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002030:	6823      	ldr	r3, [r4, #0]
 8002032:	f043 0320 	orr.w	r3, r3, #32
 8002036:	6023      	str	r3, [r4, #0]
 8002038:	4832      	ldr	r0, [pc, #200]	@ (8002104 <_printf_i+0x238>)
 800203a:	2778      	movs	r7, #120	@ 0x78
 800203c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002040:	6823      	ldr	r3, [r4, #0]
 8002042:	6831      	ldr	r1, [r6, #0]
 8002044:	061f      	lsls	r7, r3, #24
 8002046:	f851 5b04 	ldr.w	r5, [r1], #4
 800204a:	d402      	bmi.n	8002052 <_printf_i+0x186>
 800204c:	065f      	lsls	r7, r3, #25
 800204e:	bf48      	it	mi
 8002050:	b2ad      	uxthmi	r5, r5
 8002052:	6031      	str	r1, [r6, #0]
 8002054:	07d9      	lsls	r1, r3, #31
 8002056:	bf44      	itt	mi
 8002058:	f043 0320 	orrmi.w	r3, r3, #32
 800205c:	6023      	strmi	r3, [r4, #0]
 800205e:	b11d      	cbz	r5, 8002068 <_printf_i+0x19c>
 8002060:	2310      	movs	r3, #16
 8002062:	e7ad      	b.n	8001fc0 <_printf_i+0xf4>
 8002064:	4826      	ldr	r0, [pc, #152]	@ (8002100 <_printf_i+0x234>)
 8002066:	e7e9      	b.n	800203c <_printf_i+0x170>
 8002068:	6823      	ldr	r3, [r4, #0]
 800206a:	f023 0320 	bic.w	r3, r3, #32
 800206e:	6023      	str	r3, [r4, #0]
 8002070:	e7f6      	b.n	8002060 <_printf_i+0x194>
 8002072:	4616      	mov	r6, r2
 8002074:	e7bd      	b.n	8001ff2 <_printf_i+0x126>
 8002076:	6833      	ldr	r3, [r6, #0]
 8002078:	6825      	ldr	r5, [r4, #0]
 800207a:	6961      	ldr	r1, [r4, #20]
 800207c:	1d18      	adds	r0, r3, #4
 800207e:	6030      	str	r0, [r6, #0]
 8002080:	062e      	lsls	r6, r5, #24
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	d501      	bpl.n	800208a <_printf_i+0x1be>
 8002086:	6019      	str	r1, [r3, #0]
 8002088:	e002      	b.n	8002090 <_printf_i+0x1c4>
 800208a:	0668      	lsls	r0, r5, #25
 800208c:	d5fb      	bpl.n	8002086 <_printf_i+0x1ba>
 800208e:	8019      	strh	r1, [r3, #0]
 8002090:	2300      	movs	r3, #0
 8002092:	6123      	str	r3, [r4, #16]
 8002094:	4616      	mov	r6, r2
 8002096:	e7bc      	b.n	8002012 <_printf_i+0x146>
 8002098:	6833      	ldr	r3, [r6, #0]
 800209a:	1d1a      	adds	r2, r3, #4
 800209c:	6032      	str	r2, [r6, #0]
 800209e:	681e      	ldr	r6, [r3, #0]
 80020a0:	6862      	ldr	r2, [r4, #4]
 80020a2:	2100      	movs	r1, #0
 80020a4:	4630      	mov	r0, r6
 80020a6:	f7fe f89b 	bl	80001e0 <memchr>
 80020aa:	b108      	cbz	r0, 80020b0 <_printf_i+0x1e4>
 80020ac:	1b80      	subs	r0, r0, r6
 80020ae:	6060      	str	r0, [r4, #4]
 80020b0:	6863      	ldr	r3, [r4, #4]
 80020b2:	6123      	str	r3, [r4, #16]
 80020b4:	2300      	movs	r3, #0
 80020b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80020ba:	e7aa      	b.n	8002012 <_printf_i+0x146>
 80020bc:	6923      	ldr	r3, [r4, #16]
 80020be:	4632      	mov	r2, r6
 80020c0:	4649      	mov	r1, r9
 80020c2:	4640      	mov	r0, r8
 80020c4:	47d0      	blx	sl
 80020c6:	3001      	adds	r0, #1
 80020c8:	d0ad      	beq.n	8002026 <_printf_i+0x15a>
 80020ca:	6823      	ldr	r3, [r4, #0]
 80020cc:	079b      	lsls	r3, r3, #30
 80020ce:	d413      	bmi.n	80020f8 <_printf_i+0x22c>
 80020d0:	68e0      	ldr	r0, [r4, #12]
 80020d2:	9b03      	ldr	r3, [sp, #12]
 80020d4:	4298      	cmp	r0, r3
 80020d6:	bfb8      	it	lt
 80020d8:	4618      	movlt	r0, r3
 80020da:	e7a6      	b.n	800202a <_printf_i+0x15e>
 80020dc:	2301      	movs	r3, #1
 80020de:	4632      	mov	r2, r6
 80020e0:	4649      	mov	r1, r9
 80020e2:	4640      	mov	r0, r8
 80020e4:	47d0      	blx	sl
 80020e6:	3001      	adds	r0, #1
 80020e8:	d09d      	beq.n	8002026 <_printf_i+0x15a>
 80020ea:	3501      	adds	r5, #1
 80020ec:	68e3      	ldr	r3, [r4, #12]
 80020ee:	9903      	ldr	r1, [sp, #12]
 80020f0:	1a5b      	subs	r3, r3, r1
 80020f2:	42ab      	cmp	r3, r5
 80020f4:	dcf2      	bgt.n	80020dc <_printf_i+0x210>
 80020f6:	e7eb      	b.n	80020d0 <_printf_i+0x204>
 80020f8:	2500      	movs	r5, #0
 80020fa:	f104 0619 	add.w	r6, r4, #25
 80020fe:	e7f5      	b.n	80020ec <_printf_i+0x220>
 8002100:	08020231 	.word	0x08020231
 8002104:	08020242 	.word	0x08020242

08002108 <memmove>:
 8002108:	4288      	cmp	r0, r1
 800210a:	b510      	push	{r4, lr}
 800210c:	eb01 0402 	add.w	r4, r1, r2
 8002110:	d902      	bls.n	8002118 <memmove+0x10>
 8002112:	4284      	cmp	r4, r0
 8002114:	4623      	mov	r3, r4
 8002116:	d807      	bhi.n	8002128 <memmove+0x20>
 8002118:	1e43      	subs	r3, r0, #1
 800211a:	42a1      	cmp	r1, r4
 800211c:	d008      	beq.n	8002130 <memmove+0x28>
 800211e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002122:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002126:	e7f8      	b.n	800211a <memmove+0x12>
 8002128:	4402      	add	r2, r0
 800212a:	4601      	mov	r1, r0
 800212c:	428a      	cmp	r2, r1
 800212e:	d100      	bne.n	8002132 <memmove+0x2a>
 8002130:	bd10      	pop	{r4, pc}
 8002132:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002136:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800213a:	e7f7      	b.n	800212c <memmove+0x24>

0800213c <_sbrk_r>:
 800213c:	b538      	push	{r3, r4, r5, lr}
 800213e:	4d06      	ldr	r5, [pc, #24]	@ (8002158 <_sbrk_r+0x1c>)
 8002140:	2300      	movs	r3, #0
 8002142:	4604      	mov	r4, r0
 8002144:	4608      	mov	r0, r1
 8002146:	602b      	str	r3, [r5, #0]
 8002148:	f7ff fb54 	bl	80017f4 <_sbrk>
 800214c:	1c43      	adds	r3, r0, #1
 800214e:	d102      	bne.n	8002156 <_sbrk_r+0x1a>
 8002150:	682b      	ldr	r3, [r5, #0]
 8002152:	b103      	cbz	r3, 8002156 <_sbrk_r+0x1a>
 8002154:	6023      	str	r3, [r4, #0]
 8002156:	bd38      	pop	{r3, r4, r5, pc}
 8002158:	2000a1b0 	.word	0x2000a1b0

0800215c <memcpy>:
 800215c:	440a      	add	r2, r1
 800215e:	4291      	cmp	r1, r2
 8002160:	f100 33ff 	add.w	r3, r0, #4294967295
 8002164:	d100      	bne.n	8002168 <memcpy+0xc>
 8002166:	4770      	bx	lr
 8002168:	b510      	push	{r4, lr}
 800216a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800216e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002172:	4291      	cmp	r1, r2
 8002174:	d1f9      	bne.n	800216a <memcpy+0xe>
 8002176:	bd10      	pop	{r4, pc}

08002178 <_realloc_r>:
 8002178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800217c:	4607      	mov	r7, r0
 800217e:	4614      	mov	r4, r2
 8002180:	460d      	mov	r5, r1
 8002182:	b921      	cbnz	r1, 800218e <_realloc_r+0x16>
 8002184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002188:	4611      	mov	r1, r2
 800218a:	f7ff bc4d 	b.w	8001a28 <_malloc_r>
 800218e:	b92a      	cbnz	r2, 800219c <_realloc_r+0x24>
 8002190:	f7ff fbde 	bl	8001950 <_free_r>
 8002194:	4625      	mov	r5, r4
 8002196:	4628      	mov	r0, r5
 8002198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800219c:	f000 f81a 	bl	80021d4 <_malloc_usable_size_r>
 80021a0:	4284      	cmp	r4, r0
 80021a2:	4606      	mov	r6, r0
 80021a4:	d802      	bhi.n	80021ac <_realloc_r+0x34>
 80021a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80021aa:	d8f4      	bhi.n	8002196 <_realloc_r+0x1e>
 80021ac:	4621      	mov	r1, r4
 80021ae:	4638      	mov	r0, r7
 80021b0:	f7ff fc3a 	bl	8001a28 <_malloc_r>
 80021b4:	4680      	mov	r8, r0
 80021b6:	b908      	cbnz	r0, 80021bc <_realloc_r+0x44>
 80021b8:	4645      	mov	r5, r8
 80021ba:	e7ec      	b.n	8002196 <_realloc_r+0x1e>
 80021bc:	42b4      	cmp	r4, r6
 80021be:	4622      	mov	r2, r4
 80021c0:	4629      	mov	r1, r5
 80021c2:	bf28      	it	cs
 80021c4:	4632      	movcs	r2, r6
 80021c6:	f7ff ffc9 	bl	800215c <memcpy>
 80021ca:	4629      	mov	r1, r5
 80021cc:	4638      	mov	r0, r7
 80021ce:	f7ff fbbf 	bl	8001950 <_free_r>
 80021d2:	e7f1      	b.n	80021b8 <_realloc_r+0x40>

080021d4 <_malloc_usable_size_r>:
 80021d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021d8:	1f18      	subs	r0, r3, #4
 80021da:	2b00      	cmp	r3, #0
 80021dc:	bfbc      	itt	lt
 80021de:	580b      	ldrlt	r3, [r1, r0]
 80021e0:	18c0      	addlt	r0, r0, r3
 80021e2:	4770      	bx	lr

080021e4 <_init>:
 80021e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021e6:	bf00      	nop
 80021e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ea:	bc08      	pop	{r3}
 80021ec:	469e      	mov	lr, r3
 80021ee:	4770      	bx	lr

080021f0 <_fini>:
 80021f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021f2:	bf00      	nop
 80021f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021f6:	bc08      	pop	{r3}
 80021f8:	469e      	mov	lr, r3
 80021fa:	4770      	bx	lr
